{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Science Portfolio and Wiki","text":"<p>Welcome to my Data Science research page and Wiki! This repository is designed to showcase various projects, research, and resources in the field of data science, with a focus on finance and algorithmic trading.</p>"},{"location":"#about-me","title":"About Me","text":"<p>I am an Associate Informatics Engineer at Xylem and a current Master's student in Computer Science at Georgia Tech, I specialize in building resilient data pipelines and managing real-time data systems. My expertise includes Python, MySQL, and database management, enabling me to efficiently handle complex data workflows and machine learning projects.</p> <p>At Xylem, I\u2019ve played a key role in maintaining data integrity through precise ETL pipeline management and empowering real-time operations using Docker, AWS ECR/ECS, and CI/CD best practices. I have a growing interest in financial analysis and quantitative finance, particularly in how data-driven insights can drive sustainable, impactful solutions. I\u2019m eager to explore how my technical skills can bridge operations and financial strategy through innovative, data-centered approaches.</p> <p>In my free time, I enjoy exploring the latest advancements in data science, technology, and finance, as well as building personal projects that challenge my skills and expand my knowledge.</p>"},{"location":"notebooks/0.0.0-mean-risk/","title":"Mean Risk EDA","text":"In\u00a0[1]: Copied! <pre>import mlflow\nimport quantstream as qs\nimport numpy as np\nimport pandas as pd\nimport polars as pl\n\nfrom plotly.io import show\n\nfrom sklearn import set_config\nfrom sklearn.model_selection import (\n    GridSearchCV,\n    KFold,\n    RandomizedSearchCV,\n    train_test_split,\n)\nfrom sklearn.pipeline import Pipeline\nfrom scipy.stats import loguniform\n\nfrom skfolio import RatioMeasure, RiskMeasure, Population\nfrom skfolio.datasets import load_factors_dataset, load_sp500_dataset\nfrom skfolio.model_selection import (\n    CombinatorialPurgedCV,\n    WalkForward,\n    cross_val_predict,\n)\nfrom skfolio.moments import (\n    DenoiseCovariance,\n    DetoneCovariance,\n    EWMu,\n    GerberCovariance,\n    ShrunkMu,\n)\nfrom skfolio.optimization import (\n    MeanRisk,\n    NestedClustersOptimization,\n    InverseVolatility,\n    ObjectiveFunction,\n    RiskBudgeting,\n)\nfrom skfolio.pre_selection import SelectKExtremes\nfrom skfolio.preprocessing import prices_to_returns\nfrom skfolio.prior import BlackLitterman, EmpiricalPrior, FactorModel\nfrom skfolio.uncertainty_set import BootstrapMuUncertaintySet\n</pre> import mlflow import quantstream as qs import numpy as np import pandas as pd import polars as pl  from plotly.io import show  from sklearn import set_config from sklearn.model_selection import (     GridSearchCV,     KFold,     RandomizedSearchCV,     train_test_split, ) from sklearn.pipeline import Pipeline from scipy.stats import loguniform  from skfolio import RatioMeasure, RiskMeasure, Population from skfolio.datasets import load_factors_dataset, load_sp500_dataset from skfolio.model_selection import (     CombinatorialPurgedCV,     WalkForward,     cross_val_predict, ) from skfolio.moments import (     DenoiseCovariance,     DetoneCovariance,     EWMu,     GerberCovariance,     ShrunkMu, ) from skfolio.optimization import (     MeanRisk,     NestedClustersOptimization,     InverseVolatility,     ObjectiveFunction,     RiskBudgeting, ) from skfolio.pre_selection import SelectKExtremes from skfolio.preprocessing import prices_to_returns from skfolio.prior import BlackLitterman, EmpiricalPrior, FactorModel from skfolio.uncertainty_set import BootstrapMuUncertaintySet In\u00a0[2]: Copied! <pre>prices = load_sp500_dataset()\nprices.head()\n</pre> prices = load_sp500_dataset() prices.head() Out[2]: AAPL AMD BAC BBY CVX GE HD JNJ JPM KO LLY MRK MSFT PEP PFE PG RRC UNH WMT XOM Date 1990-01-02 0.264 4.125 4.599 0.144 4.991 14.391 1.117 3.438 3.394 2.235 6.658 4.215 0.384 4.738 1.021 3.860 3.322 0.310 3.653 4.068 1990-01-03 0.266 4.000 4.636 0.161 4.910 14.364 1.121 3.452 3.508 2.203 6.658 4.282 0.386 4.692 1.024 3.853 3.322 0.304 3.653 4.027 1990-01-04 0.267 3.938 4.537 0.159 4.847 14.283 1.128 3.459 3.522 2.192 6.621 4.215 0.397 4.646 1.041 3.777 3.322 0.301 3.634 3.987 1990-01-05 0.268 3.812 4.438 0.159 4.775 14.148 1.113 3.423 3.536 2.174 6.549 4.128 0.387 4.581 1.032 3.709 3.322 0.288 3.595 3.966 1990-01-08 0.269 3.812 4.463 0.147 4.820 14.229 1.102 3.481 3.536 2.220 6.549 4.181 0.393 4.664 1.023 3.777 3.322 0.282 3.644 4.027 In\u00a0[3]: Copied! <pre>portfolio = qs.Portfolio()\nportfolio.add_security(\"AAPL\")\nportfolio.add_security(\"ABBV\")\nportfolio.add_security(\"CVX\")\nportfolio.add_security(\"BRK-B\")\nportfolio.add_security(\"XOM\")\nportfolio.add_security(\"GM\")\nportfolio.add_security(\"JPM\")\nportfolio.add_security(\"META\")\nportfolio.add_security(\"NVDA\")\nportfolio.add_security(\"VZ\")\nportfolio.add_security(\"WMT\")\n</pre> portfolio = qs.Portfolio() portfolio.add_security(\"AAPL\") portfolio.add_security(\"ABBV\") portfolio.add_security(\"CVX\") portfolio.add_security(\"BRK-B\") portfolio.add_security(\"XOM\") portfolio.add_security(\"GM\") portfolio.add_security(\"JPM\") portfolio.add_security(\"META\") portfolio.add_security(\"NVDA\") portfolio.add_security(\"VZ\") portfolio.add_security(\"WMT\") In\u00a0[4]: Copied! <pre>portfolio.data\n</pre> portfolio.data Out[4]: <pre>&lt;xarray.Dataset&gt; Size: 1MB\nDimensions:           (security: 11, time: 1258)\nCoordinates:\n  * security          (security) object 88B 'AAPL' 'ABBV' ... 'WMT' 'XOM'\n  * time              (time) datetime64[ns] 10kB 2019-10-21 ... 2024-10-18\nData variables:\n    open              (security, time) float64 111kB 59.38 60.29 ... 120.8 120.4\n    high              (security, time) float64 111kB 60.25 60.55 ... 121.6 120.6\n    low               (security, time) float64 111kB 59.33 59.91 ... 119.7 119.2\n    close             (security, time) float64 111kB 60.13 59.99 ... 120.3 120.0\n    adjClose          (security, time) float64 111kB 58.18 58.05 ... 120.3 120.0\n    volume            (security, time) float64 111kB 8.947e+07 ... 1.258e+07\n    unadjustedVolume  (security, time) float64 111kB 8.947e+07 ... 1.258e+07\n    change            (security, time) float64 111kB 0.7475 -0.3 ... -0.41 -0.43\n    changePercent     (security, time) float64 111kB 1.26 -0.4976 ... -0.357\n    vwap              (security, time) float64 111kB 59.77 60.19 ... 120.6 120.1\n    label             (security, time) object 111kB 'October 21, 19' ... 'Oct...\n    changeOverTime    (security, time) float64 111kB 0.0126 ... -0.00357</pre>xarray.Dataset<ul><li>Dimensions:<ul><li>security: 11</li><li>time: 1258</li></ul></li><li>Coordinates: (2)<ul><li>security(security)object'AAPL' 'ABBV' ... 'WMT' 'XOM'<pre>array(['AAPL', 'ABBV', 'BRK-B', 'CVX', 'GM', 'JPM', 'META', 'NVDA', 'VZ',\n       'WMT', 'XOM'], dtype=object)</pre></li><li>time(time)datetime64[ns]2019-10-21 ... 2024-10-18<pre>array(['2019-10-21T00:00:00.000000000', '2019-10-22T00:00:00.000000000',\n       '2019-10-23T00:00:00.000000000', ..., '2024-10-16T00:00:00.000000000',\n       '2024-10-17T00:00:00.000000000', '2024-10-18T00:00:00.000000000'],\n      dtype='datetime64[ns]')</pre></li></ul></li><li>Data variables: (12)<ul><li>open(security, time)float6459.38 60.29 60.53 ... 120.8 120.4<pre>array([[ 59.38    ,  60.29    ,  60.53    , ..., 231.6     , 233.43    ,\n        236.18    ],\n       [ 76.88    ,  78.05    ,  77.79    , ..., 190.45    , 190.54    ,\n        188.97    ],\n       [210.      , 211.029999, 210.5     , ..., 463.25    , 466.1     ,\n        467.      ],\n       ...,\n       [ 61.01    ,  61.23    ,  60.6     , ...,  43.74    ,  43.88    ,\n         43.83    ],\n       [ 39.77    ,  39.92    ,  39.72    , ...,  81.53    ,  81.27    ,\n         80.87    ],\n       [ 67.82    ,  68.78    ,  68.96    , ..., 120.89    , 120.76    ,\n        120.44    ]])</pre></li><li>high(security, time)float6460.25 60.55 60.81 ... 121.6 120.6<pre>array([[ 60.25    ,  60.55    ,  60.81    , ..., 232.12    , 233.85    ,\n        236.18    ],\n       [ 77.85    ,  78.66    ,  78.02    , ..., 191.04    , 191.62    ,\n        189.69    ],\n       [211.539993, 211.970001, 211.009995, ..., 466.      , 467.84    ,\n        467.      ],\n       ...,\n       [ 61.23    ,  61.23    ,  61.32    , ...,  44.1     ,  44.      ,\n         44.17    ],\n       [ 39.94    ,  40.06    ,  39.95    , ...,  81.66    ,  81.5     ,\n         81.69    ],\n       [ 68.77    ,  69.76    ,  69.76    , ..., 121.44    , 121.58    ,\n        120.64    ]])</pre></li><li>low(security, time)float6459.33 59.91 60.31 ... 119.7 119.2<pre>array([[ 59.33    ,  59.91    ,  60.31    , ..., 229.84    , 230.52    ,\n        234.01    ],\n       [ 75.85    ,  77.75    ,  77.19    , ..., 188.73    , 188.46    ,\n        188.16    ],\n       [209.759995, 210.470001, 209.539993, ..., 462.2     , 464.27    ,\n        463.25    ],\n       ...,\n       [ 57.92    ,  60.51    ,  60.55    , ...,  43.66    ,  43.53    ,\n         43.67    ],\n       [ 39.61    ,  39.8     ,  39.56    , ...,  80.62    ,  80.65    ,\n         80.66    ],\n       [ 67.82    ,  68.65    ,  68.78    , ..., 120.6     , 119.71    ,\n        119.15    ]])</pre></li><li>close(security, time)float6460.13 59.99 60.8 ... 120.3 120.0<pre>array([[ 60.13    ,  59.99    ,  60.8     , ..., 231.78    , 232.15    ,\n        235.      ],\n       [ 77.3     ,  77.87    ,  77.75    , ..., 190.46    , 188.57    ,\n        188.86    ],\n       [211.490005, 210.619995, 210.960007, ..., 465.69    , 465.85    ,\n        464.8     ],\n       ...,\n       [ 60.75    ,  60.77    ,  60.88    , ...,  43.91    ,  43.85    ,\n         43.99    ],\n       [ 39.91    ,  39.86    ,  39.78    , ...,  81.22    ,  80.89    ,\n         81.31    ],\n       [ 68.74    ,  69.09    ,  69.75    , ..., 120.66    , 120.35    ,\n        120.01    ]])</pre></li><li>adjClose(security, time)float6458.18 58.05 58.83 ... 120.3 120.0<pre>array([[ 58.18    ,  58.05    ,  58.83    , ..., 231.78    , 232.15    ,\n        235.      ],\n       [ 62.38    ,  62.84    ,  62.74    , ..., 190.46    , 188.57    ,\n        188.86    ],\n       [211.490005, 210.619995, 210.960007, ..., 465.69    , 465.85    ,\n        464.8     ],\n       ...,\n       [ 46.11    ,  46.13    ,  46.21    , ...,  43.91    ,  43.85    ,\n         43.99    ],\n       [ 36.95    ,  36.9     ,  36.83    , ...,  81.22    ,  80.89    ,\n         81.31    ],\n       [ 53.73    ,  54.01    ,  54.52    , ..., 120.66    , 120.35    ,\n        120.01    ]])</pre></li><li>volume(security, time)float648.947e+07 9.074e+07 ... 1.258e+07<pre>array([[89469932., 90736004., 79730180., ..., 34082240., 32993810.,\n        45441281.],\n       [ 7882560.,  6863955.,  6195542., ...,  5576000.,  4419002.,\n         5607902.],\n       [ 3337300.,  2716800.,  2413800., ...,  3166300.,  2520903.,\n         5635463.],\n       ...,\n       [11441991.,  9802244., 10461906., ...,  9459000., 10539459.,\n        13058370.],\n       [10417549.,  7789555.,  8606657., ..., 11123300.,  9424705.,\n        12324148.],\n       [10473346.,  9503140.,  8722963., ...,  8426800., 11204857.,\n        12580749.]])</pre></li><li>unadjustedVolume(security, time)float648.947e+07 9.074e+07 ... 1.258e+07<pre>array([[89469932., 90736004., 79730180., ..., 34082240., 32993810.,\n        45441281.],\n       [ 7882560.,  6863955.,  6195542., ...,  5576000.,  4419002.,\n         5607902.],\n       [ 3337300.,  2716800.,  2413800., ...,  3166300.,  2520903.,\n         5635463.],\n       ...,\n       [11441991.,  9802244., 10461906., ...,  9459000., 10539459.,\n        13058370.],\n       [10417549.,  7789555.,  8606657., ..., 11123300.,  9424705.,\n        12324148.],\n       [10473346.,  9503140.,  8722963., ...,  8426800., 11204857.,\n        12580749.]])</pre></li><li>change(security, time)float640.7475 -0.3 0.27 ... -0.41 -0.43<pre>array([[ 0.7475  , -0.3     ,  0.27    , ...,  0.18    , -1.28    ,\n        -1.18    ],\n       [ 0.42    , -0.18    , -0.04    , ...,  0.01    , -1.97    ,\n        -0.11    ],\n       [ 1.49    , -0.410004,  0.460007, ...,  2.44    , -0.25    ,\n        -2.2     ],\n       ...,\n       [-0.26    , -0.46    ,  0.28    , ...,  0.17    , -0.03    ,\n         0.16    ],\n       [ 0.14667 , -0.056667,  0.06    , ..., -0.31    , -0.38    ,\n         0.44    ],\n       [ 0.92    ,  0.31    ,  0.79    , ..., -0.23    , -0.41    ,\n        -0.43    ]])</pre></li><li>changePercent(security, time)float641.26 -0.4976 ... -0.3395 -0.357<pre>array([[ 1.26      , -0.49759   ,  0.44606   , ...,  0.07772021,\n        -0.54834   , -0.49962   ],\n       [ 0.54631   , -0.23062   , -0.05142049, ...,  0.00525072,\n        -1.03      , -0.0582103 ],\n       [ 0.70953   , -0.19429   ,  0.21853   , ...,  0.52671   ,\n        -0.05363656, -0.47109   ],\n       ...,\n       [-0.42616   , -0.75127   ,  0.46205   , ...,  0.38866   ,\n        -0.06836828,  0.36505   ],\n       [ 0.35202   , -0.1503    ,  0.15106   , ..., -0.38023   ,\n        -0.46758   ,  0.54408   ],\n       [ 1.36      ,  0.45071   ,  1.15      , ..., -0.19026   ,\n        -0.33952   , -0.35702   ]])</pre></li><li>vwap(security, time)float6459.77 60.19 60.61 ... 120.6 120.1<pre>array([[ 59.7725,  60.185 ,  60.6125, ..., 231.335 , 232.4875, 235.3425],\n       [ 76.97  ,  78.0825,  77.6875, ..., 190.17  , 189.7975, 188.92  ],\n       [210.93  , 211.02  , 210.5   , ..., 464.285 , 466.015 , 465.5125],\n       ...,\n       [ 60.2275,  60.935 ,  60.8375, ...,  43.8525,  43.815 ,  43.915 ],\n       [ 39.8075,  39.91  ,  39.7525, ...,  81.2575,  81.0775,  81.1325],\n       [ 68.2875,  69.07  ,  69.3125, ..., 120.8975, 120.6   , 120.06  ]])</pre></li><li>label(security, time)object'October 21, 19' ... 'October 18...<pre>array([['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24'],\n       ['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24'],\n       ['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24'],\n       ...,\n       ['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24'],\n       ['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24'],\n       ['October 21, 19', 'October 22, 19', 'October 23, 19', ...,\n        'October 16, 24', 'October 17, 24', 'October 18, 24']],\n      dtype=object)</pre></li><li>changeOverTime(security, time)float640.0126 -0.004976 ... -0.00357<pre>array([[ 1.260000e-02, -4.975900e-03,  4.460600e-03, ...,  7.772021e-04,\n        -5.483400e-03, -4.996200e-03],\n       [ 5.463100e-03, -2.306200e-03, -5.142049e-04, ...,  5.250720e-05,\n        -1.030000e-02, -5.821030e-04],\n       [ 7.095300e-03, -1.942900e-03,  2.185300e-03, ...,  5.267100e-03,\n        -5.363656e-04, -4.710900e-03],\n       ...,\n       [-4.261600e-03, -7.512700e-03,  4.620500e-03, ...,  3.886600e-03,\n        -6.836828e-04,  3.650500e-03],\n       [ 3.520200e-03, -1.503000e-03,  1.510600e-03, ..., -3.802300e-03,\n        -4.675800e-03,  5.440800e-03],\n       [ 1.360000e-02,  4.507100e-03,  1.150000e-02, ..., -1.902600e-03,\n        -3.395200e-03, -3.570200e-03]])</pre></li></ul></li><li>Indexes: (2)<ul><li>securityPandasIndex<pre>PandasIndex(Index(['AAPL', 'ABBV', 'BRK-B', 'CVX', 'GM', 'JPM', 'META', 'NVDA', 'VZ',\n       'WMT', 'XOM'],\n      dtype='object', name='security'))</pre></li><li>timePandasIndex<pre>PandasIndex(DatetimeIndex(['2019-10-21', '2019-10-22', '2019-10-23', '2019-10-24',\n               '2019-10-25', '2019-10-28', '2019-10-29', '2019-10-30',\n               '2019-10-31', '2019-11-01',\n               ...\n               '2024-10-07', '2024-10-08', '2024-10-09', '2024-10-10',\n               '2024-10-11', '2024-10-14', '2024-10-15', '2024-10-16',\n               '2024-10-17', '2024-10-18'],\n              dtype='datetime64[ns]', name='time', length=1258, freq=None))</pre></li></ul></li><li>Attributes: (0)</li></ul> In\u00a0[5]: Copied! <pre>prices = portfolio.data[\"adjClose\"]\nvolume = portfolio.data[\"volume\"]\n</pre> prices = portfolio.data[\"adjClose\"] volume = portfolio.data[\"volume\"] In\u00a0[6]: Copied! <pre>df_prices = prices.to_dataframe()\n# unstack the multi-index\ndf_prices = df_prices.unstack()\ndf_prices.columns = df_prices.columns.droplevel()\ndf_prices = df_prices.T\ndf_prices\n</pre> df_prices = prices.to_dataframe() # unstack the multi-index df_prices = df_prices.unstack() df_prices.columns = df_prices.columns.droplevel() df_prices = df_prices.T df_prices Out[6]: security AAPL ABBV BRK-B CVX GM JPM META NVDA VZ WMT XOM time 2019-10-21 58.18 62.38 211.490005 93.40 34.31 106.92 189.19 4.88 46.11 36.95 53.73 2019-10-22 58.05 62.84 210.619995 94.35 34.68 108.00 181.79 4.87 46.13 36.90 54.01 2019-10-23 58.83 62.74 210.960007 94.50 34.96 108.28 185.59 4.85 46.21 36.83 54.52 2019-10-24 58.92 61.98 210.259995 94.18 34.21 108.21 185.82 4.90 45.98 36.75 54.01 2019-10-25 59.65 61.76 211.800003 95.05 35.09 109.07 187.33 5.09 45.82 36.73 54.13 ... ... ... ... ... ... ... ... ... ... ... ... 2024-10-14 231.30 194.10 459.980000 151.78 48.63 221.48 590.42 138.07 43.19 80.29 124.08 2024-10-15 233.85 191.86 462.680000 147.73 47.85 222.39 586.27 131.60 43.74 81.65 120.35 2024-10-16 231.78 190.46 465.690000 148.73 49.01 223.64 576.79 135.72 43.91 81.22 120.66 2024-10-17 232.15 188.57 465.850000 151.20 49.38 224.42 576.93 136.93 43.85 80.89 120.35 2024-10-18 235.00 188.86 464.800000 150.75 49.18 225.37 576.47 138.00 43.99 81.31 120.01 <p>1258 rows \u00d7 11 columns</p> In\u00a0[7]: Copied! <pre>df_volume = volume.to_dataframe()\n# unstack the multi-index\ndf_volume = df_volume.unstack()\ndf_volume.columns = df_volume.columns.droplevel()\ndf_volume = df_volume.T\ndf_volume\n</pre> df_volume = volume.to_dataframe() # unstack the multi-index df_volume = df_volume.unstack() df_volume.columns = df_volume.columns.droplevel() df_volume = df_volume.T df_volume Out[7]: security AAPL ABBV BRK-B CVX GM JPM META NVDA VZ WMT XOM time 2019-10-21 89469932.0 7882560.0 3337300.0 4153612.0 7429278.0 13272678.0 8580744.0 266967240.0 11441991.0 10417549.0 10473346.0 2019-10-22 90736004.0 6863955.0 2716800.0 4130577.0 6773553.0 12657085.0 19854192.0 337369120.0 9802244.0 7789555.0 9503140.0 2019-10-23 79730180.0 6195542.0 2413800.0 4159941.0 6468788.0 9397328.0 12370819.0 285770000.0 10461906.0 8606657.0 8722963.0 2019-10-24 71665020.0 6332465.0 3147200.0 3893194.0 6813476.0 8057164.0 11505406.0 239037320.0 11215278.0 8767829.0 9069090.0 2019-10-25 73477184.0 5497019.0 2539200.0 3369139.0 8735581.0 9055700.0 8061240.0 423092000.0 15036400.0 7692979.0 7607192.0 ... ... ... ... ... ... ... ... ... ... ... ... 2024-10-14 39882100.0 3624123.0 2969800.0 4214721.0 6774134.0 9048925.0 8252000.0 232347700.0 9923500.0 9914500.0 9808122.0 2024-10-15 64751400.0 6553712.0 3929900.0 6704610.0 12532100.0 9235825.0 9564236.0 377831021.0 15444500.0 13276221.0 15771317.0 2024-10-16 34082240.0 5576000.0 3166300.0 4303737.0 10152811.0 6382515.0 11268400.0 264879720.0 9459000.0 11123300.0 8426800.0 2024-10-17 32993810.0 4419002.0 2520903.0 6593136.0 8333573.0 6470186.0 8701158.0 306435921.0 10539459.0 9424705.0 11204857.0 2024-10-18 45441281.0 5607902.0 5635463.0 5208202.0 9500117.0 7000543.0 7694274.0 176090184.0 13058370.0 12324148.0 12580749.0 <p>1258 rows \u00d7 11 columns</p> In\u00a0[8]: Copied! <pre>X = prices_to_returns(df_prices)\nX_train, X_test = train_test_split(X, test_size=0.33, shuffle=False)\n</pre> X = prices_to_returns(df_prices) X_train, X_test = train_test_split(X, test_size=0.33, shuffle=False) In\u00a0[9]: Copied! <pre>model = MeanRisk()\n</pre> model = MeanRisk() In\u00a0[10]: Copied! <pre>model.fit(X_train)\nprint(model.weights_)\n</pre> model.fit(X_train) print(model.weights_) <pre>[9.73411244e-07 1.95372778e-01 8.53442419e-02 8.41094737e-07\n 1.14044646e-06 4.75810791e-07 1.12496635e-02 4.34553009e-07\n 4.55634538e-01 2.52244258e-01 1.50655877e-04]\n</pre> In\u00a0[11]: Copied! <pre>port1 = model.predict(X_test)\n\nprint(port1.annualized_sharpe_ratio)\nprint(\"-\"*50)\nprint(port1.summary())\n</pre> port1 = model.predict(X_test)  print(port1.annualized_sharpe_ratio) print(\"-\"*50) print(port1.summary()) <pre>1.8218065176406282\n--------------------------------------------------\nMean                                              0.094%\nAnnualized Mean                                   23.77%\nVariance                                         0.0068%\nAnnualized Variance                                1.70%\nSemi-Variance                                    0.0034%\nAnnualized Semi-Variance                           0.85%\nStandard Deviation                                 0.82%\nAnnualized Standard Deviation                     13.04%\nSemi-Deviation                                     0.58%\nAnnualized Semi-Deviation                          9.21%\nMean Absolute Deviation                            0.59%\nCVaR at 95%                                        1.78%\nEVaR at 95%                                        2.39%\nWorst Realization                                  3.47%\nCDaR at 95%                                        7.76%\nMAX Drawdown                                      10.27%\nAverage Drawdown                                   2.26%\nEDaR at 95%                                        8.53%\nFirst Lower Partial Moment                         0.29%\nUlcer Index                                        0.032\nGini Mean Difference                               0.87%\nValue at Risk at 95%                               1.19%\nDrawdown at Risk at 95%                            6.65%\nEntropic Risk Measure at 95%                        2.99\nFourth Central Moment                          0.000003%\nFourth Lower Partial Moment                    0.000001%\nSkew                                              23.84%\nKurtosis                                         714.37%\nSharpe Ratio                                        0.11\nAnnualized Sharpe Ratio                             1.82\nSortino Ratio                                       0.16\nAnnualized Sortino Ratio                            2.58\nMean Absolute Deviation Ratio                       0.16\nFirst Lower Partial Moment Ratio                    0.32\nValue at Risk Ratio at 95%                         0.079\nCVaR Ratio at 95%                                  0.053\nEntropic Risk Measure Ratio at 95%               0.00031\nEVaR Ratio at 95%                                  0.039\nWorst Realization Ratio                            0.027\nDrawdown at Risk Ratio at 95%                      0.014\nCDaR Ratio at 95%                                  0.012\nCalmar Ratio                                      0.0092\nAverage Drawdown Ratio                             0.042\nEDaR Ratio at 95%                                  0.011\nUlcer Index Ratio                                  0.029\nGini Mean Difference Ratio                          0.11\nEffective Number of Assets            3.1564586751797026\nAssets Number                                         11\ndtype: object\n</pre> In\u00a0[12]: Copied! <pre>model = MeanRisk(\n    risk_measure=RiskMeasure.ANNUALIZED_VARIANCE,\n    objective_function=ObjectiveFunction.MAXIMIZE_RATIO,\n    portfolio_params=dict(name=\"Max Sharpe\"),\n)\nmodel.fit(X_train)\nmodel.weights_\n</pre> model = MeanRisk(     risk_measure=RiskMeasure.ANNUALIZED_VARIANCE,     objective_function=ObjectiveFunction.MAXIMIZE_RATIO,     portfolio_params=dict(name=\"Max Sharpe\"), ) model.fit(X_train) model.weights_ <pre>/Users/christianl/repos/research/.venv/lib/python3.12/site-packages/skfolio/optimization/convex/_mean_risk.py:608: UserWarning:\n\nThe annualized risk measure Annualized Variance will be convertedto its non-annualized version Variance\n\n</pre> Out[12]: <pre>array([3.34966176e-03, 5.84626279e-01, 2.12809131e-11, 1.93307329e-11,\n       8.93733155e-12, 1.18914899e-11, 7.24519191e-12, 3.01683828e-01,\n       9.69659330e-12, 4.84028007e-11, 1.10340231e-01])</pre> In\u00a0[13]: Copied! <pre>benchmark = InverseVolatility(portfolio_params=dict(name=\"Inverse Vol\"))\nbenchmark.fit(X_train)\nbenchmark.weights_\n</pre> benchmark = InverseVolatility(portfolio_params=dict(name=\"Inverse Vol\")) benchmark.fit(X_train) benchmark.weights_ Out[13]: <pre>array([0.08389328, 0.11547621, 0.12192735, 0.07321198, 0.06313561,\n       0.08267092, 0.06155309, 0.05419695, 0.14644521, 0.12084116,\n       0.07664825])</pre> In\u00a0[14]: Copied! <pre>pred_model = model.predict(X_test)\npred_bench = benchmark.predict(X_test)\n</pre> pred_model = model.predict(X_test) pred_bench = benchmark.predict(X_test) In\u00a0[15]: Copied! <pre>print(pred_model.annualized_sharpe_ratio)\nprint(pred_bench.annualized_sharpe_ratio)\n</pre> print(pred_model.annualized_sharpe_ratio) print(pred_bench.annualized_sharpe_ratio) <pre>2.680034743732841\n2.8490664336909\n</pre> In\u00a0[16]: Copied! <pre>population = Population([pred_model, pred_bench])\npopulation.plot_composition()\n</pre> population = Population([pred_model, pred_bench]) population.plot_composition() In\u00a0[17]: Copied! <pre>fig = population.plot_cumulative_returns()\n# show(fig) is only used for the documentation sticker.\nshow(fig)\n</pre> fig = population.plot_cumulative_returns() # show(fig) is only used for the documentation sticker. show(fig) In\u00a0[18]: Copied! <pre>population.summary()\n</pre> population.summary() Out[18]: Max Sharpe Inverse Vol Mean 0.19% 0.12% Annualized Mean 48.65% 31.31% Variance 0.013% 0.0048% Annualized Variance 3.29% 1.21% Semi-Variance 0.0064% 0.0025% Annualized Semi-Variance 1.60% 0.64% Standard Deviation 1.14% 0.69% Annualized Standard Deviation 18.15% 10.99% Semi-Deviation 0.80% 0.50% Annualized Semi-Deviation 12.67% 7.99% Mean Absolute Deviation 0.85% 0.53% CVaR at 95% 2.30% 1.44% EVaR at 95% 3.11% 1.98% Worst Realization 4.23% 2.89% CDaR at 95% 7.57% 4.97% MAX Drawdown 9.72% 7.59% Average Drawdown 2.08% 1.27% EDaR at 95% 8.22% 5.81% First Lower Partial Moment 0.42% 0.27% Ulcer Index 0.030 0.019 Gini Mean Difference 1.23% 0.77% Value at Risk at 95% 1.60% 1.02% Drawdown at Risk at 95% 6.57% 4.21% Entropic Risk Measure at 95% 2.99 2.99 Fourth Central Moment 0.000010% 0.000001% Fourth Lower Partial Moment 0.000004% 0.000001% Skew 24.26% -28.83% Kurtosis 611.16% 397.29% Sharpe Ratio 0.17 0.18 Annualized Sharpe Ratio 2.68 2.85 Sortino Ratio 0.24 0.25 Annualized Sortino Ratio 3.84 3.92 Mean Absolute Deviation Ratio 0.23 0.23 First Lower Partial Moment Ratio 0.46 0.47 Value at Risk Ratio at 95% 0.12 0.12 CVaR Ratio at 95% 0.084 0.086 Entropic Risk Measure Ratio at 95% 0.00064 0.00041 EVaR Ratio at 95% 0.062 0.063 Worst Realization Ratio 0.046 0.043 Drawdown at Risk Ratio at 95% 0.029 0.029 CDaR Ratio at 95% 0.026 0.025 Calmar Ratio 0.020 0.016 Average Drawdown Ratio 0.093 0.098 EDaR Ratio at 95% 0.023 0.021 Ulcer Index Ratio 0.064 0.064 Gini Mean Difference Ratio 0.16 0.16 Effective Number of Assets 2.2472556243642394 9.993052157352208 Assets Number 11 11 In\u00a0[22]: Copied! <pre>import mlflow\n</pre> import mlflow In\u00a0[29]: Copied! <pre>pred_model.summary().to_dict()\n</pre> pred_model.summary().to_dict() Out[29]: <pre>{'Mean': '0.19%',\n 'Annualized Mean': '48.65%',\n 'Variance': '0.013%',\n 'Annualized Variance': '3.29%',\n 'Semi-Variance': '0.0064%',\n 'Annualized Semi-Variance': '1.60%',\n 'Standard Deviation': '1.14%',\n 'Annualized Standard Deviation': '18.15%',\n 'Semi-Deviation': '0.80%',\n 'Annualized Semi-Deviation': '12.67%',\n 'Mean Absolute Deviation': '0.85%',\n 'CVaR at 95%': '2.30%',\n 'EVaR at 95%': '3.11%',\n 'Worst Realization': '4.23%',\n 'CDaR at 95%': '7.57%',\n 'MAX Drawdown': '9.72%',\n 'Average Drawdown': '2.08%',\n 'EDaR at 95%': '8.22%',\n 'First Lower Partial Moment': '0.42%',\n 'Ulcer Index': '0.030',\n 'Gini Mean Difference': '1.23%',\n 'Value at Risk at 95%': '1.60%',\n 'Drawdown at Risk at 95%': '6.57%',\n 'Entropic Risk Measure at 95%': '2.99',\n 'Fourth Central Moment': '0.000010%',\n 'Fourth Lower Partial Moment': '0.000004%',\n 'Skew': '24.26%',\n 'Kurtosis': '611.16%',\n 'Sharpe Ratio': '0.17',\n 'Annualized Sharpe Ratio': '2.68',\n 'Sortino Ratio': '0.24',\n 'Annualized Sortino Ratio': '3.84',\n 'Mean Absolute Deviation Ratio': '0.23',\n 'First Lower Partial Moment Ratio': '0.46',\n 'Value at Risk Ratio at 95%': '0.12',\n 'CVaR Ratio at 95%': '0.084',\n 'Entropic Risk Measure Ratio at 95%': '0.00064',\n 'EVaR Ratio at 95%': '0.062',\n 'Worst Realization Ratio': '0.046',\n 'Drawdown at Risk Ratio at 95%': '0.029',\n 'CDaR Ratio at 95%': '0.026',\n 'Calmar Ratio': '0.020',\n 'Average Drawdown Ratio': '0.093',\n 'EDaR Ratio at 95%': '0.023',\n 'Ulcer Index Ratio': '0.064',\n 'Gini Mean Difference Ratio': '0.16',\n 'Effective Number of Assets': '2.2472556243642394',\n 'Assets Number': '11'}</pre> In\u00a0[43]: Copied! <pre>metrics = pred_model.summary().to_dict()\nmetrics\n</pre> metrics = pred_model.summary().to_dict() metrics Out[43]: <pre>{'Mean': '0.19%',\n 'Annualized Mean': '48.65%',\n 'Variance': '0.013%',\n 'Annualized Variance': '3.29%',\n 'Semi-Variance': '0.0064%',\n 'Annualized Semi-Variance': '1.60%',\n 'Standard Deviation': '1.14%',\n 'Annualized Standard Deviation': '18.15%',\n 'Semi-Deviation': '0.80%',\n 'Annualized Semi-Deviation': '12.67%',\n 'Mean Absolute Deviation': '0.85%',\n 'CVaR at 95%': '2.30%',\n 'EVaR at 95%': '3.11%',\n 'Worst Realization': '4.23%',\n 'CDaR at 95%': '7.57%',\n 'MAX Drawdown': '9.72%',\n 'Average Drawdown': '2.08%',\n 'EDaR at 95%': '8.22%',\n 'First Lower Partial Moment': '0.42%',\n 'Ulcer Index': '0.030',\n 'Gini Mean Difference': '1.23%',\n 'Value at Risk at 95%': '1.60%',\n 'Drawdown at Risk at 95%': '6.57%',\n 'Entropic Risk Measure at 95%': '2.99',\n 'Fourth Central Moment': '0.000010%',\n 'Fourth Lower Partial Moment': '0.000004%',\n 'Skew': '24.26%',\n 'Kurtosis': '611.16%',\n 'Sharpe Ratio': '0.17',\n 'Annualized Sharpe Ratio': '2.68',\n 'Sortino Ratio': '0.24',\n 'Annualized Sortino Ratio': '3.84',\n 'Mean Absolute Deviation Ratio': '0.23',\n 'First Lower Partial Moment Ratio': '0.46',\n 'Value at Risk Ratio at 95%': '0.12',\n 'CVaR Ratio at 95%': '0.084',\n 'Entropic Risk Measure Ratio at 95%': '0.00064',\n 'EVaR Ratio at 95%': '0.062',\n 'Worst Realization Ratio': '0.046',\n 'Drawdown at Risk Ratio at 95%': '0.029',\n 'CDaR Ratio at 95%': '0.026',\n 'Calmar Ratio': '0.020',\n 'Average Drawdown Ratio': '0.093',\n 'EDaR Ratio at 95%': '0.023',\n 'Ulcer Index Ratio': '0.064',\n 'Gini Mean Difference Ratio': '0.16',\n 'Effective Number of Assets': '2.2472556243642394',\n 'Assets Number': '11'}</pre> In\u00a0[51]: Copied! <pre># convert the metrics to float or int, resolve percent signs\n# replace spaces with underscores\nmetrics = {\n        k.replace(\" \", \"_\").replace(\"%\", \"percent\"): float(v.replace(\"%\", \"\")) if isinstance(v, str) else v\n        for k, v in pred_model.summary().to_dict().items()\n        if isinstance(v, (int, float)) or (isinstance(v, str) and v.replace(\"%\", \"\").replace(\".\", \"\").isdigit())\n    }\nmetrics\n</pre> # convert the metrics to float or int, resolve percent signs # replace spaces with underscores metrics = {         k.replace(\" \", \"_\").replace(\"%\", \"percent\"): float(v.replace(\"%\", \"\")) if isinstance(v, str) else v         for k, v in pred_model.summary().to_dict().items()         if isinstance(v, (int, float)) or (isinstance(v, str) and v.replace(\"%\", \"\").replace(\".\", \"\").isdigit())     } metrics Out[51]: <pre>{'Mean': 0.19,\n 'Annualized_Mean': 48.65,\n 'Variance': 0.013,\n 'Annualized_Variance': 3.29,\n 'Semi-Variance': 0.0064,\n 'Annualized_Semi-Variance': 1.6,\n 'Standard_Deviation': 1.14,\n 'Annualized_Standard_Deviation': 18.15,\n 'Semi-Deviation': 0.8,\n 'Annualized_Semi-Deviation': 12.67,\n 'Mean_Absolute_Deviation': 0.85,\n 'CVaR_at_95percent': 2.3,\n 'EVaR_at_95percent': 3.11,\n 'Worst_Realization': 4.23,\n 'CDaR_at_95percent': 7.57,\n 'MAX_Drawdown': 9.72,\n 'Average_Drawdown': 2.08,\n 'EDaR_at_95percent': 8.22,\n 'First_Lower_Partial_Moment': 0.42,\n 'Ulcer_Index': 0.03,\n 'Gini_Mean_Difference': 1.23,\n 'Value_at_Risk_at_95percent': 1.6,\n 'Drawdown_at_Risk_at_95percent': 6.57,\n 'Entropic_Risk_Measure_at_95percent': 2.99,\n 'Fourth_Central_Moment': 1e-05,\n 'Fourth_Lower_Partial_Moment': 4e-06,\n 'Skew': 24.26,\n 'Kurtosis': 611.16,\n 'Sharpe_Ratio': 0.17,\n 'Annualized_Sharpe_Ratio': 2.68,\n 'Sortino_Ratio': 0.24,\n 'Annualized_Sortino_Ratio': 3.84,\n 'Mean_Absolute_Deviation_Ratio': 0.23,\n 'First_Lower_Partial_Moment_Ratio': 0.46,\n 'Value_at_Risk_Ratio_at_95percent': 0.12,\n 'CVaR_Ratio_at_95percent': 0.084,\n 'Entropic_Risk_Measure_Ratio_at_95percent': 0.00064,\n 'EVaR_Ratio_at_95percent': 0.062,\n 'Worst_Realization_Ratio': 0.046,\n 'Drawdown_at_Risk_Ratio_at_95percent': 0.029,\n 'CDaR_Ratio_at_95percent': 0.026,\n 'Calmar_Ratio': 0.02,\n 'Average_Drawdown_Ratio': 0.093,\n 'EDaR_Ratio_at_95percent': 0.023,\n 'Ulcer_Index_Ratio': 0.064,\n 'Gini_Mean_Difference_Ratio': 0.16,\n 'Effective_Number_of_Assets': 2.2472556243642394,\n 'Assets_Number': 11.0}</pre> In\u00a0[64]: Copied! <pre>import mlflow\n\n# Correct the tracking URI\nmlflow.set_tracking_uri(\"http://127.0.0.1:5000/\")\n\nmlflow.set_experiment(\"mean-risk2\")\n\nwith mlflow.start_run(run_name=\"mean-risk4\"):\n    mlflow.log_params(\n        {\n            \"risk_measure\": \"ANNUALIZED_VARIANCE\",  # Assuming RiskMeasure.ANNUALIZED_VARIANCE is a string\n            \"objective_function\": \"MAXIMIZE_RATIO\",  # Assuming ObjectiveFunction.MAXIMIZE_RATIO is a string\n        }\n    )    \n    mlflow.log_metrics(metrics)\n    mlflow.sklearn.log_model(model, \"model\")\n</pre> import mlflow  # Correct the tracking URI mlflow.set_tracking_uri(\"http://127.0.0.1:5000/\")  mlflow.set_experiment(\"mean-risk2\")  with mlflow.start_run(run_name=\"mean-risk4\"):     mlflow.log_params(         {             \"risk_measure\": \"ANNUALIZED_VARIANCE\",  # Assuming RiskMeasure.ANNUALIZED_VARIANCE is a string             \"objective_function\": \"MAXIMIZE_RATIO\",  # Assuming ObjectiveFunction.MAXIMIZE_RATIO is a string         }     )         mlflow.log_metrics(metrics)     mlflow.sklearn.log_model(model, \"model\") <pre>2024/10/20 17:21:52 WARNING mlflow.utils.environment: Failed to resolve installed pip version. ``pip`` will be added to conda.yaml environment spec without a version specifier.\n2024/10/20 17:21:52 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\n2024/10/20 17:21:52 INFO mlflow.tracking._tracking_service.client: \ud83c\udfc3 View run mean-risk4 at: http://127.0.0.1:5000/#/experiments/721934320915735068/runs/1f1938bf5f5c4328b7d343c171868ba9.\n2024/10/20 17:21:52 INFO mlflow.tracking._tracking_service.client: \ud83e\uddea View experiment at: http://127.0.0.1:5000/#/experiments/721934320915735068.\n</pre> In\u00a0[54]: Copied! <pre>fig.show()\n</pre> fig.show() In\u00a0[57]: Copied! <pre>fig_json = fig.to_json()\n\nwith open(\"fig.json\", \"w\") as f:\n    f.write(fig_json)\n</pre> fig_json = fig.to_json()  with open(\"fig.json\", \"w\") as f:     f.write(fig_json) In\u00a0[65]: Copied! <pre>model_name = \"mean-risk\"\nrun_id = input(\"Enter the run ID: \")\nmodel_uri = f\"runs:/{run_id}/model\"\n\nresult = mlflow.register_model(model_uri, model_name)\n</pre> model_name = \"mean-risk\" run_id = input(\"Enter the run ID: \") model_uri = f\"runs:/{run_id}/model\"  result = mlflow.register_model(model_uri, model_name) <pre>Registered model 'mean-risk' already exists. Creating a new version of this model...\n2024/10/20 17:22:25 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: mean-risk, version 3\nCreated version '3' of model 'mean-risk'.\n</pre> In\u00a0[66]: Copied! <pre>model_version = 2\nmodel_uri = f\"models:/{model_name}@challenger\"\n\nloaded_model = mlflow.sklearn.load_model(model_uri)\ny_pred = loaded_model.predict(X_test)\n</pre> model_version = 2 model_uri = f\"models:/{model_name}@challenger\"  loaded_model = mlflow.sklearn.load_model(model_uri) y_pred = loaded_model.predict(X_test) In\u00a0[74]: Copied! <pre># plot the cumulative returns\ny_pred.plot_cumulative_returns()\n</pre> # plot the cumulative returns y_pred.plot_cumulative_returns() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/0.0.0-mean-risk/#pull-portfolio-data-for-eda","title":"Pull portfolio data for EDA\u00b6","text":""},{"location":"notebooks/0.0.0-mean-risk/#train-mean-risk-model","title":"Train Mean Risk Model\u00b6","text":""},{"location":"notebooks/0.0.0-mean-risk/#model","title":"Model\u00b6","text":"<p>We create a Maximum Sharpe Ratio model and then fit it on the training set. portfolio_params are parameters passed to the Portfolio returned by the predict method. It can be omitted, here we use it to give a name to our maximum Sharpe Ration portfolio:</p>"},{"location":"notebooks/0.0.1-options-pricing/","title":"Portfolio Optimization","text":"In\u00a0[1]: Copied! <pre>import yfinance as yf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n</pre> import yfinance as yf import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error In\u00a0[2]: Copied! <pre>import os\nFMP_API_KEY = os.environ.get('FMP_API_KEY')\n</pre> import os FMP_API_KEY = os.environ.get('FMP_API_KEY') In\u00a0[3]: Copied! <pre># Define the ticker symbol for JPMorgan Chase &amp; Co.\nticker_symbol = 'JPM'\n\n# Initialize the yfinance Ticker object for JPM\njpm_ticker = yf.Ticker(ticker_symbol)\n\n# Get available expiration dates\nexpiration_dates = jpm_ticker.options\n\n# Choose an expiration date that exists in the list of available expiration dates\n# For the purpose of this example, let's choose the first available expiration date\nexpiration_date = expiration_dates[0]\n\n# Download the options data for JPM for the chosen expiration date\njpm_options = jpm_ticker.option_chain(expiration_date)\n\n# Separate the calls and puts data\njpm_calls = jpm_options.calls\njpm_puts = jpm_options.puts\n\n# Display the first few rows of the calls data\njpm_calls.head()\n</pre> # Define the ticker symbol for JPMorgan Chase &amp; Co. ticker_symbol = 'JPM'  # Initialize the yfinance Ticker object for JPM jpm_ticker = yf.Ticker(ticker_symbol)  # Get available expiration dates expiration_dates = jpm_ticker.options  # Choose an expiration date that exists in the list of available expiration dates # For the purpose of this example, let's choose the first available expiration date expiration_date = expiration_dates[0]  # Download the options data for JPM for the chosen expiration date jpm_options = jpm_ticker.option_chain(expiration_date)  # Separate the calls and puts data jpm_calls = jpm_options.calls jpm_puts = jpm_options.puts  # Display the first few rows of the calls data jpm_calls.head() Out[3]: contractSymbol lastTradeDate strike lastPrice bid ask change percentChange volume openInterest impliedVolatility inTheMoney contractSize currency 0 JPM241101C00110000 2024-10-11 14:41:01+00:00 110.0 112.27 111.35 115.15 0.0 0.0 NaN 2 3.730469 True REGULAR USD 1 JPM241101C00165000 2024-10-10 17:52:05+00:00 165.0 47.40 56.40 60.15 0.0 0.0 NaN 1 1.780275 True REGULAR USD 2 JPM241101C00175000 2024-10-24 19:59:09+00:00 175.0 50.22 46.40 50.20 0.0 0.0 2.0 4 1.498049 True REGULAR USD 3 JPM241101C00180000 2024-10-11 15:11:14+00:00 180.0 43.50 41.40 45.20 0.0 0.0 1.0 20 1.350589 True REGULAR USD 4 JPM241101C00185000 2024-10-24 19:47:29+00:00 185.0 39.70 36.45 40.20 0.0 0.0 4.0 4 1.219730 True REGULAR USD In\u00a0[4]: Copied! <pre>jpm_calls\n</pre> jpm_calls Out[4]: contractSymbol lastTradeDate strike lastPrice bid ask change percentChange volume openInterest impliedVolatility inTheMoney contractSize currency 0 JPM241101C00110000 2024-10-11 14:41:01+00:00 110.0 112.27 111.35 115.15 0.000000 0.000000 NaN 2 3.730469 True REGULAR USD 1 JPM241101C00165000 2024-10-10 17:52:05+00:00 165.0 47.40 56.40 60.15 0.000000 0.000000 NaN 1 1.780275 True REGULAR USD 2 JPM241101C00175000 2024-10-24 19:59:09+00:00 175.0 50.22 46.40 50.20 0.000000 0.000000 2.0 4 1.498049 True REGULAR USD 3 JPM241101C00180000 2024-10-11 15:11:14+00:00 180.0 43.50 41.40 45.20 0.000000 0.000000 1.0 20 1.350589 True REGULAR USD 4 JPM241101C00185000 2024-10-24 19:47:29+00:00 185.0 39.70 36.45 40.20 0.000000 0.000000 4.0 4 1.219730 True REGULAR USD 5 JPM241101C00190000 2024-10-10 17:54:07+00:00 190.0 23.00 31.45 35.20 0.000000 0.000000 2.0 1 1.075200 True REGULAR USD 6 JPM241101C00195000 2024-10-18 19:45:08+00:00 195.0 30.85 26.45 30.00 0.000000 0.000000 2.0 44 0.881837 True REGULAR USD 7 JPM241101C00200000 2024-10-28 18:56:07+00:00 200.0 25.35 21.50 24.05 0.000000 0.000000 1.0 56 1.017583 True REGULAR USD 8 JPM241101C00205000 2024-10-29 15:42:50+00:00 205.0 19.90 16.50 20.20 -0.180000 -0.896416 10.0 78 0.653324 True REGULAR USD 9 JPM241101C00207500 2024-10-18 15:59:03+00:00 207.5 18.55 14.00 16.95 0.000000 0.000000 1.0 1 0.844728 True REGULAR USD 10 JPM241101C00210000 2024-10-28 13:32:32+00:00 210.0 15.20 12.25 13.40 0.599999 4.109585 1.0 317 0.520024 True REGULAR USD 11 JPM241101C00212500 2024-10-29 17:16:35+00:00 212.5 11.50 9.80 11.95 -0.500000 -4.166666 1.0 34 0.656742 True REGULAR USD 12 JPM241101C00215000 2024-10-29 17:36:30+00:00 215.0 8.50 8.05 8.45 -2.350000 -21.658989 4.0 493 0.374762 True REGULAR USD 13 JPM241101C00217500 2024-10-29 18:17:14+00:00 217.5 5.86 5.45 7.95 -2.690000 -31.461988 51.0 121 0.599125 True REGULAR USD 14 JPM241101C00220000 2024-10-29 19:59:43+00:00 220.0 3.95 3.60 3.90 -2.180000 -35.562805 21.0 802 0.267830 True REGULAR USD 15 JPM241101C00222500 2024-10-29 19:58:32+00:00 222.5 2.04 2.04 2.10 -2.060000 -50.243904 1148.0 1644 0.235115 True REGULAR USD 16 JPM241101C00225000 2024-10-29 19:59:53+00:00 225.0 0.90 0.89 0.95 -1.520000 -62.809920 4979.0 4350 0.223396 False REGULAR USD 17 JPM241101C00227500 2024-10-29 19:59:07+00:00 227.5 0.30 0.29 0.32 -0.900000 -75.000000 5730.0 2623 0.211922 False REGULAR USD 18 JPM241101C00230000 2024-10-29 19:58:33+00:00 230.0 0.08 0.07 0.09 -0.390000 -82.978730 3265.0 2348 0.209969 False REGULAR USD 19 JPM241101C00232500 2024-10-29 19:23:53+00:00 232.5 0.03 0.01 0.03 -0.110000 -78.571430 306.0 3415 0.222664 False REGULAR USD 20 JPM241101C00235000 2024-10-29 18:24:29+00:00 235.0 0.01 0.00 0.01 -0.020000 -66.666670 87.0 1210 0.234383 False REGULAR USD 21 JPM241101C00237500 2024-10-29 19:39:41+00:00 237.5 0.01 0.00 0.02 -0.020000 -66.666670 17.0 53 0.296882 False REGULAR USD 22 JPM241101C00240000 2024-10-25 19:58:19+00:00 240.0 0.01 0.00 0.51 0.000000 0.000000 1.0 24 0.512700 False REGULAR USD 23 JPM241101C00242500 2024-10-18 16:23:30+00:00 242.5 0.03 0.00 0.01 0.000000 0.000000 1.0 3 0.351569 False REGULAR USD 24 JPM241101C00245000 2024-10-29 13:40:20+00:00 245.0 0.01 0.00 0.01 0.000000 0.000000 45.0 322 0.390631 False REGULAR USD 25 JPM241101C00255000 2024-10-11 14:02:31+00:00 255.0 0.31 0.00 0.12 0.000000 0.000000 1.0 5 0.660160 False REGULAR USD 26 JPM241101C00290000 2024-10-08 19:18:56+00:00 290.0 0.24 0.00 0.21 0.000000 0.000000 NaN 4 1.259769 False REGULAR USD 27 JPM241101C00295000 2024-10-25 17:45:32+00:00 295.0 0.02 0.00 0.21 0.000000 0.000000 3.0 3 1.328128 False REGULAR USD In\u00a0[5]: Copied! <pre># Preprocessing and feature engineering for JPM calls data\n# Assume similar steps for puts data and other assets\n\n# Drop rows with missing values\njpm_calls_cleaned = jpm_calls.dropna()\n\n# Feature engineering: calculate moneyness, time to expiration and other relevant features\n# Assuming that 'lastPrice' represents the current stock price\njpm_calls_cleaned['Moneyness'] = jpm_calls_cleaned['lastPrice'] / jpm_calls_cleaned['strike']\njpm_calls_cleaned['TimeToExpiration'] = (pd.to_datetime(expiration_date) - pd.Timestamp.now()).days\n\n# Display the first few rows of the processed calls data\nprint(jpm_calls_cleaned.head())\n</pre> # Preprocessing and feature engineering for JPM calls data # Assume similar steps for puts data and other assets  # Drop rows with missing values jpm_calls_cleaned = jpm_calls.dropna()  # Feature engineering: calculate moneyness, time to expiration and other relevant features # Assuming that 'lastPrice' represents the current stock price jpm_calls_cleaned['Moneyness'] = jpm_calls_cleaned['lastPrice'] / jpm_calls_cleaned['strike'] jpm_calls_cleaned['TimeToExpiration'] = (pd.to_datetime(expiration_date) - pd.Timestamp.now()).days  # Display the first few rows of the processed calls data print(jpm_calls_cleaned.head()) <pre>       contractSymbol             lastTradeDate  strike  lastPrice    bid  \\\n2  JPM241101C00175000 2024-10-24 19:59:09+00:00   175.0      50.22  46.40   \n3  JPM241101C00180000 2024-10-11 15:11:14+00:00   180.0      43.50  41.40   \n4  JPM241101C00185000 2024-10-24 19:47:29+00:00   185.0      39.70  36.45   \n5  JPM241101C00190000 2024-10-10 17:54:07+00:00   190.0      23.00  31.45   \n6  JPM241101C00195000 2024-10-18 19:45:08+00:00   195.0      30.85  26.45   \n\n    ask  change  percentChange  volume  openInterest  impliedVolatility  \\\n2  50.2     0.0            0.0     2.0             4           1.498049   \n3  45.2     0.0            0.0     1.0            20           1.350589   \n4  40.2     0.0            0.0     4.0             4           1.219730   \n5  35.2     0.0            0.0     2.0             1           1.075200   \n6  30.0     0.0            0.0     2.0            44           0.881837   \n\n   inTheMoney contractSize currency  Moneyness  TimeToExpiration  \n2        True      REGULAR      USD   0.286971                 2  \n3        True      REGULAR      USD   0.241667                 2  \n4        True      REGULAR      USD   0.214595                 2  \n5        True      REGULAR      USD   0.121053                 2  \n6        True      REGULAR      USD   0.158205                 2  \n</pre> <pre>/var/folders/ll/73c51kv535z52nyks80l9vmw0000gn/T/ipykernel_78284/1641090000.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  jpm_calls_cleaned['Moneyness'] = jpm_calls_cleaned['lastPrice'] / jpm_calls_cleaned['strike']\n/var/folders/ll/73c51kv535z52nyks80l9vmw0000gn/T/ipykernel_78284/1641090000.py:10: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  jpm_calls_cleaned['TimeToExpiration'] = (pd.to_datetime(expiration_date) - pd.Timestamp.now()).days\n</pre> In\u00a0[6]: Copied! <pre># Plot the distribution of strike prices for JPM calls\nplt.figure(figsize=(10, 6))\nplt.hist(jpm_calls_cleaned['strike'], bins=50, color='blue', edgecolor='black')\nplt.title('Distribution of Strike Prices for JPM Calls')\nplt.xlabel('Strike Price')\nplt.ylabel('Frequency')\n</pre> # Plot the distribution of strike prices for JPM calls plt.figure(figsize=(10, 6)) plt.hist(jpm_calls_cleaned['strike'], bins=50, color='blue', edgecolor='black') plt.title('Distribution of Strike Prices for JPM Calls') plt.xlabel('Strike Price') plt.ylabel('Frequency') Out[6]: <pre>Text(0, 0.5, 'Frequency')</pre> In\u00a0[7]: Copied! <pre>X = jpm_calls_cleaned[['strike', 'Moneyness', 'TimeToExpiration']]\ny = jpm_calls_cleaned['lastPrice']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n</pre> X = jpm_calls_cleaned[['strike', 'Moneyness', 'TimeToExpiration']] y = jpm_calls_cleaned['lastPrice']  # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) In\u00a0[8]: Copied! <pre># scalarize the features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n</pre> # scalarize the features scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) In\u00a0[9]: Copied! <pre># implement the random forest regressor\nrf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_regressor.fit(X_train_scaled, y_train)\n</pre> # implement the random forest regressor rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42) rf_regressor.fit(X_train_scaled, y_train) Out[9]: <pre>RandomForestRegressor(random_state=42)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\u00a0\u00a0RandomForestRegressor?Documentation for RandomForestRegressoriFitted<pre>RandomForestRegressor(random_state=42)</pre> In\u00a0[10]: Copied! <pre># Predict the option prices using the trained model\ny_pred = rf_regressor.predict(X_test_scaled)\n\n# Calculate the mean squared error of the model\nmse = mean_squared_error(y_test, y_pred)\n</pre> # Predict the option prices using the trained model y_pred = rf_regressor.predict(X_test_scaled)  # Calculate the mean squared error of the model mse = mean_squared_error(y_test, y_pred) In\u00a0[11]: Copied! <pre>#  Display the mean squared error\nprint(f'Mean Squared Error: {mse}')\n</pre> #  Display the mean squared error print(f'Mean Squared Error: {mse}') <pre>Mean Squared Error: 18.752455612000126\n</pre> In\u00a0[12]: Copied! <pre>y_pred\n</pre> y_pred Out[12]: <pre>array([15.3665,  0.0868, 40.545 ,  0.1684,  5.5301])</pre> In\u00a0[13]: Copied! <pre># plot the predicted vs actual option prices\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, y_pred, color='blue')\nplt.xlabel('Actual Option Price')\nplt.ylabel('Predicted Option Price')\nplt.title('Actual vs Predicted Option Prices')\nplt.show()\n</pre> # plot the predicted vs actual option prices plt.figure(figsize=(10, 6)) plt.scatter(y_test, y_pred, color='blue') plt.xlabel('Actual Option Price') plt.ylabel('Predicted Option Price') plt.title('Actual vs Predicted Option Prices') plt.show() In\u00a0[14]: Copied! <pre>from research.option_pricing import calculate_black_scholes\n</pre> from research.option_pricing import calculate_black_scholes In\u00a0[15]: Copied! <pre>jpm_calls_cleaned\n</pre> jpm_calls_cleaned Out[15]: contractSymbol lastTradeDate strike lastPrice bid ask change percentChange volume openInterest impliedVolatility inTheMoney contractSize currency Moneyness TimeToExpiration 2 JPM241101C00175000 2024-10-24 19:59:09+00:00 175.0 50.22 46.40 50.20 0.000000 0.000000 2.0 4 1.498049 True REGULAR USD 0.286971 2 3 JPM241101C00180000 2024-10-11 15:11:14+00:00 180.0 43.50 41.40 45.20 0.000000 0.000000 1.0 20 1.350589 True REGULAR USD 0.241667 2 4 JPM241101C00185000 2024-10-24 19:47:29+00:00 185.0 39.70 36.45 40.20 0.000000 0.000000 4.0 4 1.219730 True REGULAR USD 0.214595 2 5 JPM241101C00190000 2024-10-10 17:54:07+00:00 190.0 23.00 31.45 35.20 0.000000 0.000000 2.0 1 1.075200 True REGULAR USD 0.121053 2 6 JPM241101C00195000 2024-10-18 19:45:08+00:00 195.0 30.85 26.45 30.00 0.000000 0.000000 2.0 44 0.881837 True REGULAR USD 0.158205 2 7 JPM241101C00200000 2024-10-28 18:56:07+00:00 200.0 25.35 21.50 24.05 0.000000 0.000000 1.0 56 1.017583 True REGULAR USD 0.126750 2 8 JPM241101C00205000 2024-10-29 15:42:50+00:00 205.0 19.90 16.50 20.20 -0.180000 -0.896416 10.0 78 0.653324 True REGULAR USD 0.097073 2 9 JPM241101C00207500 2024-10-18 15:59:03+00:00 207.5 18.55 14.00 16.95 0.000000 0.000000 1.0 1 0.844728 True REGULAR USD 0.089398 2 10 JPM241101C00210000 2024-10-28 13:32:32+00:00 210.0 15.20 12.25 13.40 0.599999 4.109585 1.0 317 0.520024 True REGULAR USD 0.072381 2 11 JPM241101C00212500 2024-10-29 17:16:35+00:00 212.5 11.50 9.80 11.95 -0.500000 -4.166666 1.0 34 0.656742 True REGULAR USD 0.054118 2 12 JPM241101C00215000 2024-10-29 17:36:30+00:00 215.0 8.50 8.05 8.45 -2.350000 -21.658989 4.0 493 0.374762 True REGULAR USD 0.039535 2 13 JPM241101C00217500 2024-10-29 18:17:14+00:00 217.5 5.86 5.45 7.95 -2.690000 -31.461988 51.0 121 0.599125 True REGULAR USD 0.026943 2 14 JPM241101C00220000 2024-10-29 19:59:43+00:00 220.0 3.95 3.60 3.90 -2.180000 -35.562805 21.0 802 0.267830 True REGULAR USD 0.017955 2 15 JPM241101C00222500 2024-10-29 19:58:32+00:00 222.5 2.04 2.04 2.10 -2.060000 -50.243904 1148.0 1644 0.235115 True REGULAR USD 0.009169 2 16 JPM241101C00225000 2024-10-29 19:59:53+00:00 225.0 0.90 0.89 0.95 -1.520000 -62.809920 4979.0 4350 0.223396 False REGULAR USD 0.004000 2 17 JPM241101C00227500 2024-10-29 19:59:07+00:00 227.5 0.30 0.29 0.32 -0.900000 -75.000000 5730.0 2623 0.211922 False REGULAR USD 0.001319 2 18 JPM241101C00230000 2024-10-29 19:58:33+00:00 230.0 0.08 0.07 0.09 -0.390000 -82.978730 3265.0 2348 0.209969 False REGULAR USD 0.000348 2 19 JPM241101C00232500 2024-10-29 19:23:53+00:00 232.5 0.03 0.01 0.03 -0.110000 -78.571430 306.0 3415 0.222664 False REGULAR USD 0.000129 2 20 JPM241101C00235000 2024-10-29 18:24:29+00:00 235.0 0.01 0.00 0.01 -0.020000 -66.666670 87.0 1210 0.234383 False REGULAR USD 0.000043 2 21 JPM241101C00237500 2024-10-29 19:39:41+00:00 237.5 0.01 0.00 0.02 -0.020000 -66.666670 17.0 53 0.296882 False REGULAR USD 0.000042 2 22 JPM241101C00240000 2024-10-25 19:58:19+00:00 240.0 0.01 0.00 0.51 0.000000 0.000000 1.0 24 0.512700 False REGULAR USD 0.000042 2 23 JPM241101C00242500 2024-10-18 16:23:30+00:00 242.5 0.03 0.00 0.01 0.000000 0.000000 1.0 3 0.351569 False REGULAR USD 0.000124 2 24 JPM241101C00245000 2024-10-29 13:40:20+00:00 245.0 0.01 0.00 0.01 0.000000 0.000000 45.0 322 0.390631 False REGULAR USD 0.000041 2 25 JPM241101C00255000 2024-10-11 14:02:31+00:00 255.0 0.31 0.00 0.12 0.000000 0.000000 1.0 5 0.660160 False REGULAR USD 0.001216 2 27 JPM241101C00295000 2024-10-25 17:45:32+00:00 295.0 0.02 0.00 0.21 0.000000 0.000000 3.0 3 1.328128 False REGULAR USD 0.000068 2 In\u00a0[16]: Copied! <pre>jpm_calls_cleaned = jpm_calls_cleaned[jpm_calls_cleaned['bid'] &gt; 0]\n</pre> jpm_calls_cleaned = jpm_calls_cleaned[jpm_calls_cleaned['bid'] &gt; 0] In\u00a0[17]: Copied! <pre>jpm_calls_cleaned['BlackScholesPrice'] = jpm_calls_cleaned.apply(lambda row: calculate_black_scholes(\n    price=row['bid'], \n    ex_price=row['strike'], \n    rfr=0.01,\n    ttm=row['TimeToExpiration'] / 365, \n    sigma=row['impliedVolatility']\n    ), axis=1)\n</pre> jpm_calls_cleaned['BlackScholesPrice'] = jpm_calls_cleaned.apply(lambda row: calculate_black_scholes(     price=row['bid'],      ex_price=row['strike'],      rfr=0.01,     ttm=row['TimeToExpiration'] / 365,      sigma=row['impliedVolatility']     ), axis=1)  <pre>/var/folders/ll/73c51kv535z52nyks80l9vmw0000gn/T/ipykernel_78284/293553304.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  jpm_calls_cleaned['BlackScholesPrice'] = jpm_calls_cleaned.apply(lambda row: calculate_black_scholes(\n</pre> In\u00a0[18]: Copied! <pre>jpm_calls_cleaned[['strike', 'lastPrice', 'BlackScholesPrice']].head()\n</pre> jpm_calls_cleaned[['strike', 'lastPrice', 'BlackScholesPrice']].head() Out[18]: strike lastPrice BlackScholesPrice 2 175.0 50.22 2.081615e-33 3 180.0 43.50 1.876262e-49 4 185.0 39.70 4.708444e-73 5 190.0 23.00 6.146497e-114 6 195.0 30.85 8.403332e-207 In\u00a0[19]: Copied! <pre># synthetic black scholes price\nplt.figure(figsize=(10, 6))\nplt.scatter(jpm_calls_cleaned['lastPrice'], jpm_calls_cleaned['BlackScholesPrice'], color='green')\nplt.xlabel('Market Price')\nplt.ylabel('Black-Scholes Price')\nplt.title('Market Price vs Black-Scholes Price')\nplt.show()\n</pre> # synthetic black scholes price plt.figure(figsize=(10, 6)) plt.scatter(jpm_calls_cleaned['lastPrice'], jpm_calls_cleaned['BlackScholesPrice'], color='green') plt.xlabel('Market Price') plt.ylabel('Black-Scholes Price') plt.title('Market Price vs Black-Scholes Price') plt.show() In\u00a0[20]: Copied! <pre>from research.option_pricing import BlackScholesGreeks, BlackScholesModel, calculate_historical_volatility\n</pre> from research.option_pricing import BlackScholesGreeks, BlackScholesModel, calculate_historical_volatility In\u00a0[21]: Copied! <pre>jpm_data = yf.download(ticker_symbol, start='2020-01-01', end='2024-11-01')\n</pre> jpm_data = yf.download(ticker_symbol, start='2020-01-01', end='2024-11-01') <pre>[*********************100%***********************]  1 of 1 completed\n</pre> In\u00a0[22]: Copied! <pre>jpm_data\n</pre> jpm_data Out[22]: Price Adj Close Close High Low Open Volume Ticker JPM JPM JPM JPM JPM JPM Date 2020-01-02 00:00:00+00:00 122.104622 141.089996 141.100006 139.259995 139.789993 10803700 2020-01-03 00:00:00+00:00 120.493271 138.339996 139.229996 137.080002 137.500000 10386800 2020-01-06 00:00:00+00:00 120.397469 138.229996 138.270004 136.500000 136.559998 10259000 2020-01-07 00:00:00+00:00 118.350632 135.880005 137.860001 135.820007 137.279999 10531300 2020-01-08 00:00:00+00:00 119.273895 136.940002 137.580002 135.600006 135.699997 9695300 ... ... ... ... ... ... ... 2024-10-23 00:00:00+00:00 223.410004 223.410004 224.800003 222.529999 223.660004 6180500 2024-10-24 00:00:00+00:00 224.979996 224.979996 225.059998 221.660004 221.830002 6002200 2024-10-25 00:00:00+00:00 222.309998 222.309998 225.619995 220.880005 225.000000 6369700 2024-10-28 00:00:00+00:00 225.500000 225.500000 225.639999 222.949997 223.350006 6843000 2024-10-29 00:00:00+00:00 222.899994 222.899994 226.750000 222.809998 225.210007 6578800 <p>1215 rows \u00d7 6 columns</p> In\u00a0[26]: Copied! <pre># calculate historical volatility\nhist_vol = calculate_historical_volatility(jpm_data)\nhist_vol\n</pre> # calculate historical volatility hist_vol = calculate_historical_volatility(jpm_data) hist_vol Out[26]: <pre>Ticker\nJPM    0.324938\ndtype: float64</pre> In\u00a0[33]: Copied! <pre>jpm_data['Close'].loc['2020-01-02 00:00:00+00:00']\n</pre> jpm_data['Close'].loc['2020-01-02 00:00:00+00:00'] Out[33]: <pre>Ticker\nJPM    141.089996\nName: 2020-01-02 00:00:00+00:00, dtype: float64</pre> In\u00a0[36]: Copied! <pre>jpm_calls_cleaned.sort_values(by='lastTradeDate', ascending=False)\n</pre> jpm_calls_cleaned.sort_values(by='lastTradeDate', ascending=False) Out[36]: contractSymbol lastTradeDate strike lastPrice bid ask change percentChange volume openInterest impliedVolatility inTheMoney contractSize currency Moneyness TimeToExpiration BlackScholesPrice 16 JPM241101C00225000 2024-10-29 19:59:53+00:00 225.0 0.90 0.89 0.95 -1.520000 -62.809920 4979.0 4350 0.223396 False REGULAR USD 0.004000 2 0.000000e+00 14 JPM241101C00220000 2024-10-29 19:59:43+00:00 220.0 3.95 3.60 3.90 -2.180000 -35.562805 21.0 802 0.267830 True REGULAR USD 0.017955 2 0.000000e+00 17 JPM241101C00227500 2024-10-29 19:59:07+00:00 227.5 0.30 0.29 0.32 -0.900000 -75.000000 5730.0 2623 0.211922 False REGULAR USD 0.001319 2 0.000000e+00 18 JPM241101C00230000 2024-10-29 19:58:33+00:00 230.0 0.08 0.07 0.09 -0.390000 -82.978730 3265.0 2348 0.209969 False REGULAR USD 0.000348 2 0.000000e+00 15 JPM241101C00222500 2024-10-29 19:58:32+00:00 222.5 2.04 2.04 2.10 -2.060000 -50.243904 1148.0 1644 0.235115 True REGULAR USD 0.009169 2 0.000000e+00 19 JPM241101C00232500 2024-10-29 19:23:53+00:00 232.5 0.03 0.01 0.03 -0.110000 -78.571430 306.0 3415 0.222664 False REGULAR USD 0.000129 2 0.000000e+00 13 JPM241101C00217500 2024-10-29 18:17:14+00:00 217.5 5.86 5.45 7.95 -2.690000 -31.461988 51.0 121 0.599125 True REGULAR USD 0.026943 2 0.000000e+00 12 JPM241101C00215000 2024-10-29 17:36:30+00:00 215.0 8.50 8.05 8.45 -2.350000 -21.658989 4.0 493 0.374762 True REGULAR USD 0.039535 2 0.000000e+00 11 JPM241101C00212500 2024-10-29 17:16:35+00:00 212.5 11.50 9.80 11.95 -0.500000 -4.166666 1.0 34 0.656742 True REGULAR USD 0.054118 2 0.000000e+00 8 JPM241101C00205000 2024-10-29 15:42:50+00:00 205.0 19.90 16.50 20.20 -0.180000 -0.896416 10.0 78 0.653324 True REGULAR USD 0.097073 2 0.000000e+00 7 JPM241101C00200000 2024-10-28 18:56:07+00:00 200.0 25.35 21.50 24.05 0.000000 0.000000 1.0 56 1.017583 True REGULAR USD 0.126750 2 9.839486e-194 10 JPM241101C00210000 2024-10-28 13:32:32+00:00 210.0 15.20 12.25 13.40 0.599999 4.109585 1.0 317 0.520024 True REGULAR USD 0.072381 2 0.000000e+00 2 JPM241101C00175000 2024-10-24 19:59:09+00:00 175.0 50.22 46.40 50.20 0.000000 0.000000 2.0 4 1.498049 True REGULAR USD 0.286971 2 2.081615e-33 4 JPM241101C00185000 2024-10-24 19:47:29+00:00 185.0 39.70 36.45 40.20 0.000000 0.000000 4.0 4 1.219730 True REGULAR USD 0.214595 2 4.708444e-73 6 JPM241101C00195000 2024-10-18 19:45:08+00:00 195.0 30.85 26.45 30.00 0.000000 0.000000 2.0 44 0.881837 True REGULAR USD 0.158205 2 8.403332e-207 9 JPM241101C00207500 2024-10-18 15:59:03+00:00 207.5 18.55 14.00 16.95 0.000000 0.000000 1.0 1 0.844728 True REGULAR USD 0.089398 2 0.000000e+00 3 JPM241101C00180000 2024-10-11 15:11:14+00:00 180.0 43.50 41.40 45.20 0.000000 0.000000 1.0 20 1.350589 True REGULAR USD 0.241667 2 1.876262e-49 5 JPM241101C00190000 2024-10-10 17:54:07+00:00 190.0 23.00 31.45 35.20 0.000000 0.000000 2.0 1 1.075200 True REGULAR USD 0.121053 2 6.146497e-114 In\u00a0[45]: Copied! <pre>bsm = BlackScholesModel(\n    S=jpm_data['Close'].loc['2020-01-02 00:00:00+00:00'],\n    K=jpm_calls_cleaned['strike'].loc[jpm_calls_cleaned.index[0]],\n    r=0.01,\n    T=jpm_calls_cleaned['TimeToExpiration'].loc[jpm_calls_cleaned.index[0]] / 365,\n    sigma=hist_vol\n)\n</pre> bsm = BlackScholesModel(     S=jpm_data['Close'].loc['2020-01-02 00:00:00+00:00'],     K=jpm_calls_cleaned['strike'].loc[jpm_calls_cleaned.index[0]],     r=0.01,     T=jpm_calls_cleaned['TimeToExpiration'].loc[jpm_calls_cleaned.index[0]] / 365,     sigma=hist_vol ) In\u00a0[46]: Copied! <pre>bsm.call_option_price()\n</pre> bsm.call_option_price() Out[46]: <pre>Ticker\nJPM    7.165357e-20\nName: 2020-01-02 00:00:00+00:00, dtype: float64</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/0.0.2-options-nn-research/","title":"0.0.2 options nn research","text":"In\u00a0[1]: Copied! <pre>import yfinance as yf\nimport pandas as pd\nimport numpy as np\n\nimport plotly.graph_objects as go\n\nfrom research.option_pricing import BlackScholesGreeks, BlackScholesModel\n</pre> import yfinance as yf import pandas as pd import numpy as np  import plotly.graph_objects as go  from research.option_pricing import BlackScholesGreeks, BlackScholesModel  In\u00a0[3]: Copied! <pre># Set the ticker symbol for the stock (e.g., Apple)\nticker = yf.Ticker(\"NVDA\")  # Replace \"AAPL\" with your desired ticker symbol\n\n# Get the expiration dates for available options\nexpiration_dates = ticker.options\n</pre> # Set the ticker symbol for the stock (e.g., Apple) ticker = yf.Ticker(\"NVDA\")  # Replace \"AAPL\" with your desired ticker symbol  # Get the expiration dates for available options expiration_dates = ticker.options In\u00a0[6]: Copied! <pre>import quantstream as qs\n\n# Get the current stock price\nfmp = qs.FmpConnector()\n</pre> import quantstream as qs  # Get the current stock price fmp = qs.FmpConnector() In\u00a0[10]: Copied! <pre>nvda = fmp.get_daily(\n    symbol=\"NVDA\",\n    from_date=\"2023-01-01\",\n    to_date=\"2024-12-31\",\n)\n</pre> nvda = fmp.get_daily(     symbol=\"NVDA\",     from_date=\"2023-01-01\",     to_date=\"2024-12-31\", ) In\u00a0[11]: Copied! <pre>nvda\n</pre> nvda Out[11]: <pre>&lt;xarray.FinDataset&gt; Size: 74kB\nDimensions:           (time: 460)\nCoordinates:\n  * time              (time) datetime64[ns] 4kB 2023-01-03 ... 2024-10-30\nData variables:\n    open              (time) float64 4kB 14.85 14.57 14.49 ... 143.0 140.3 139.5\n    high              (time) float64 4kB 15.0 14.85 14.56 ... 143.1 142.3 140.3\n    low               (time) float64 4kB 14.1 14.24 14.15 ... 140.1 138.9 136.8\n    close             (time) float64 4kB 14.32 14.75 14.27 ... 140.5 141.2 139.2\n    adjClose          (time) float64 4kB 14.31 14.74 14.26 ... 140.5 141.2 139.2\n    volume            (time) int64 4kB 401277000 431324000 ... 161917686\n    unadjustedVolume  (time) int64 4kB 401277000 431324000 ... 161917686\n    change            (time) float64 4kB -0.536 0.182 -0.226 ... 0.965 -0.36\n    changePercent     (time) float64 4kB -3.57 1.24 -1.52 ... 0.6843 -0.258\n    vwap              (time) float64 4kB 14.57 14.6 14.37 ... 141.7 140.7 139.0\n    label             (time) &lt;U16 29kB 'January 03, 23' ... 'October 30, 24'\n    changeOverTime    (time) float64 4kB -0.0357 0.0124 ... 0.006843 -0.00258</pre>xarray.FinDataset<ul><li>Dimensions:<ul><li>time: 460</li></ul></li><li>Coordinates: (1)<ul><li>time(time)datetime64[ns]2023-01-03 ... 2024-10-30<pre>array(['2023-01-03T00:00:00.000000000', '2023-01-04T00:00:00.000000000',\n       '2023-01-05T00:00:00.000000000', ..., '2024-10-28T00:00:00.000000000',\n       '2024-10-29T00:00:00.000000000', '2024-10-30T00:00:00.000000000'],\n      dtype='datetime64[ns]')</pre></li></ul></li><li>Data variables: (12)<ul><li>open(time)float6414.85 14.57 14.49 ... 140.3 139.5<pre>array([ 14.85,  14.57,  14.49,  14.47,  15.28,  15.51,  15.84,  16.1 ,\n        16.28,  16.9 ,  17.67,  17.04,  17.01,  18.06,  18.83,  18.91,\n        19.7 ,  19.46,  19.95,  19.17,  19.69,  21.  ,  21.  ,  20.81,\n        21.38,  22.39,  22.61,  21.69,  21.54,  21.58,  22.55,  22.13,\n        21.63,  21.  ,  20.71,  23.44,  23.23,  23.67,  23.37,  23.19,\n        22.49,  23.32,  23.89,  23.6 ,  23.49,  24.18,  23.41,  22.75,\n        23.5 ,  23.76,  24.03,  25.98,  25.62,  26.18,  26.43,  27.12,\n        27.03,  26.84,  26.45,  26.83,  27.23,  27.14,  27.51,  27.97,\n        26.83,  26.58,  26.82,  27.72,  27.37,  26.73,  26.5 ,  26.57,\n        27.53,  27.36,  27.67,  26.95,  27.01,  27.08,  27.  ,  27.36,\n        27.23,  27.84,  28.68,  27.84,  27.65,  27.83,  28.52,  28.9 ,\n        29.01,  28.9 ,  28.53,  28.51,  28.84,  29.58,  30.41,  31.54,\n        30.9 ,  31.  ,  30.21,  38.52,  37.89,  40.6 ,  39.49,  38.49,\n        40.1 ,  38.91,  38.83,  38.92,  37.72,  39.04,  39.2 ,  40.19,\n        40.82,  42.6 ,  43.45,  43.  ,  43.5 ,  42.25,  42.46,  42.46,\n        40.8 ,  40.66,  41.56,  41.68,  42.52,  42.14,  41.84,  42.32,\n        42.66,  42.48,  43.03,  44.52,  46.58,  46.29,  46.7 ,  47.46,\n        46.51,  45.79,  44.73,  44.94,  46.02,  46.52,  46.67,  46.75,\n        46.46,  45.83,  43.8 ,  44.99,  45.11,  44.85,  44.27,  42.16,\n        41.75,  40.49,  44.56,  44.52,  43.97,  42.64,  44.49,  48.14,\n...\n        89.8 ,  92.3 ,  91.14,  93.94,  95.85,  93.11,  90.  ,  90.3 ,\n        88.45,  88.48,  90.41,  86.87,  88.7 ,  87.44,  83.93,  87.42,\n        89.7 ,  89.1 ,  86.43,  88.34,  84.97,  83.15,  78.1 ,  80.77,\n        83.95,  78.87,  83.82,  87.6 ,  87.24,  85.08,  84.45,  87.79,\n        89.39,  91.1 ,  89.48,  90.53,  90.3 ,  90.48,  89.6 ,  92.47,\n        94.91,  94.37,  93.75,  93.6 ,  95.46, 102.03, 104.45, 110.24,\n       113.05, 114.65, 112.52, 113.62, 115.72, 118.37, 124.05, 119.77,\n       120.37, 121.77, 123.06, 129.39, 129.96, 132.99, 131.14, 139.8 ,\n       127.12, 123.24, 121.2 , 126.13, 124.1 , 124.58, 123.47, 121.13,\n       121.66, 127.38, 127.49, 130.35, 134.03, 135.75, 128.26, 130.56,\n       128.44, 121.35, 121.85, 120.35, 120.35, 122.78, 119.17, 113.04,\n       116.19, 113.69, 111.52, 112.9 , 117.53, 103.76,  92.06, 103.84,\n       107.81, 102.  , 105.64, 106.32, 112.44, 118.53, 118.76, 121.94,\n       124.28, 128.4 , 127.32, 130.02, 125.86, 129.57, 125.05, 128.12,\n       121.36, 119.53, 116.01, 105.41, 104.99, 108.04, 104.88, 107.81,\n       109.39, 116.84, 119.08, 116.79, 118.17, 115.89, 117.35, 117.06,\n       116.55, 116.52, 122.02, 126.8 , 123.97, 118.31, 121.77, 116.44,\n       120.92, 124.94, 124.99, 130.26, 134.11, 131.91, 134.01, 136.47,\n       137.87, 133.98, 139.34, 138.67, 138.13, 142.91, 142.03, 140.82,\n       140.93, 143.  , 140.29, 139.54])</pre></li><li>high(time)float6415.0 14.85 14.56 ... 142.3 140.3<pre>array([ 15.  ,  14.85,  14.56,  15.01,  16.06,  15.96,  16.03,  16.64,\n        16.92,  17.73,  17.87,  17.2 ,  17.86,  19.25,  19.5 ,  19.37,\n        20.17,  20.63,  20.14,  19.69,  21.19,  21.95,  21.74,  21.57,\n        22.26,  22.88,  23.02,  22.08,  22.05,  23.05,  22.86,  22.55,\n        21.74,  21.49,  21.1 ,  23.89,  23.47,  23.88,  23.83,  23.26,\n        23.38,  23.9 ,  24.25,  24.13,  24.2 ,  24.45,  23.63,  23.3 ,\n        24.22,  24.29,  25.59,  26.4 ,  26.02,  26.39,  27.59,  27.5 ,\n        27.17,  27.  ,  26.51,  27.08,  27.5 ,  27.83,  28.  ,  28.  ,\n        27.  ,  27.08,  27.62,  27.79,  27.47,  26.89,  26.88,  27.01,\n        28.11,  28.  ,  28.03,  27.18,  27.37,  27.25,  27.33,  27.5 ,\n        27.76,  29.06,  28.84,  28.37,  27.86,  28.76,  29.22,  28.97,\n        29.11,  28.95,  28.78,  28.97,  29.87,  30.2 ,  31.83,  31.58,\n        31.52,  31.29,  30.61,  39.48,  39.17,  41.94,  40.3 ,  40.05,\n        40.5 ,  39.57,  39.16,  39.5 ,  38.86,  39.71,  39.53,  41.1 ,\n        43.  ,  43.29,  43.72,  43.99,  43.62,  43.43,  42.81,  42.76,\n        41.94,  41.85,  41.6 ,  42.55,  42.9 ,  43.18,  42.18,  43.21,\n        42.81,  42.76,  43.94,  46.16,  48.09,  46.5 ,  47.9 ,  47.82,\n        47.09,  45.87,  45.11,  46.18,  46.05,  47.4 ,  47.03,  47.13,\n        46.9 ,  45.84,  45.12,  45.64,  45.54,  45.24,  44.31,  43.57,\n        42.02,  43.8 ,  45.27,  44.68,  44.06,  43.58,  47.07,  48.19,\n...\n        90.41,  92.65,  94.78,  96.77,  96.38,  93.24,  91.3 ,  92.23,\n        90.09,  90.37,  90.63,  88.48,  88.83,  87.64,  87.4 ,  90.74,\n        90.17,  90.61,  88.12,  88.78,  86.19,  84.32,  80.07,  82.77,\n        84.08,  83.32,  88.33,  87.99,  88.82,  86.  ,  86.24,  89.28,\n        92.22,  91.78,  91.19,  91.07,  91.4 ,  91.  ,  91.65,  94.86,\n        95.82,  94.74,  95.2 ,  95.4 ,  96.02, 106.32, 106.48, 114.94,\n       115.49, 115.82, 112.72, 115.  , 116.6 , 122.45, 125.59, 121.69,\n       123.1 , 122.87, 126.88, 129.8 , 132.84, 133.73, 136.33, 140.76,\n       130.63, 124.46, 126.5 , 128.12, 126.41, 127.71, 124.84, 123.41,\n       128.28, 128.85, 130.77, 133.82, 135.1 , 136.15, 131.92, 131.39,\n       129.04, 121.85, 122.4 , 121.6 , 124.07, 124.69, 119.95, 116.63,\n       116.2 , 116.28, 111.99, 118.34, 120.16, 108.72, 103.41, 107.71,\n       108.8 , 105.5 , 106.6 , 111.07, 116.23, 118.6 , 123.24, 125.  ,\n       130.  , 129.88, 129.35, 130.75, 129.6 , 131.26, 129.2 , 128.33,\n       124.43, 121.75, 116.21, 113.27, 109.65, 108.15, 106.55, 109.4 ,\n       117.19, 120.79, 119.96, 118.18, 118.8 , 117.7 , 119.66, 118.62,\n       116.99, 121.8 , 124.94, 127.67, 124.03, 121.5 , 122.44, 119.38,\n       124.36, 125.04, 130.64, 133.48, 134.52, 135.  , 135.78, 139.6 ,\n       138.57, 136.62, 140.89, 138.9 , 143.71, 144.42, 142.43, 141.35,\n       144.13, 143.14, 142.26, 140.33])</pre></li><li>low(time)float6414.1 14.24 14.15 ... 138.9 136.8<pre>array([ 14.1 ,  14.24,  14.15,  14.03,  15.14,  15.47,  15.56,  15.49,\n        16.17,  16.9 ,  17.28,  16.73,  16.83,  17.82,  18.82,  18.58,\n        19.28,  19.41,  19.15,  18.95,  19.61,  20.7 ,  20.79,  20.79,\n        21.15,  22.01,  22.12,  20.81,  20.96,  21.37,  22.11,  21.93,\n        20.98,  20.62,  20.42,  23.03,  22.95,  23.45,  23.21,  22.51,\n        22.43,  23.13,  23.49,  23.24,  23.42,  23.38,  22.73,  22.3 ,\n        23.46,  23.36,  23.89,  25.67,  25.13,  25.38,  26.24,  26.69,\n        26.36,  26.37,  25.85,  26.6 ,  27.1 ,  27.11,  27.34,  27.31,\n        26.4 ,  26.43,  26.67,  27.13,  26.45,  26.33,  26.22,  26.43,\n        27.36,  27.23,  27.  ,  26.72,  26.67,  26.23,  26.71,  26.63,\n        27.07,  27.78,  28.08,  27.47,  27.24,  27.73,  28.35,  28.45,\n        28.46,  28.25,  28.05,  28.15,  28.83,  29.43,  30.32,  30.92,\n        30.68,  30.63,  29.81,  36.64,  37.55,  39.95,  37.82,  38.34,\n        39.06,  38.71,  38.15,  37.36,  37.51,  38.57,  38.62,  39.74,\n        40.55,  42.15,  42.66,  42.67,  42.08,  42.23,  42.02,  40.1 ,\n        40.45,  40.52,  40.6 ,  41.5 ,  42.2 ,  42.09,  41.35,  42.18,\n        41.65,  42.07,  42.78,  44.49,  45.06,  45.26,  45.73,  46.74,\n        45.06,  44.1 ,  44.04,  44.92,  44.63,  45.75,  46.38,  46.51,\n        46.03,  43.39,  43.8 ,  44.39,  44.56,  44.06,  42.13,  41.84,\n        40.64,  40.31,  43.71,  43.41,  43.  ,  41.66,  44.22,  45.33,\n...\n        88.22,  90.41,  90.83,  93.51,  92.5 ,  89.12,  89.19,  89.2 ,\n        87.62,  88.4 ,  85.88,  85.93,  86.73,  83.02,  83.71,  86.93,\n        87.53,  85.93,  86.06,  83.95,  82.4 ,  75.61,  76.4 ,  80.26,\n        79.18,  78.22,  83.39,  85.27,  86.3 ,  81.25,  83.2 ,  87.04,\n        89.06,  89.01,  89.42,  88.23,  89.23,  88.53,  88.93,  91.6 ,\n        94.1 ,  91.81,  93.44,  93.18,  93.25, 101.52, 103.  , 109.88,\n       110.9 , 109.66, 106.94, 112.  , 114.05, 117.47, 118.32, 118.02,\n       117.01, 118.74, 122.57, 127.16, 128.32, 129.58, 130.69, 129.52,\n       124.3 , 118.04, 119.32, 122.6 , 122.92, 122.75, 118.83, 121.03,\n       121.36, 125.68, 127.04, 128.65, 132.42, 127.05, 127.22, 127.18,\n       124.58, 116.72, 116.56, 117.37, 119.86, 122.1 , 113.44, 106.3 ,\n       111.58, 111.3 , 102.54, 110.88, 106.81, 101.37,  90.69, 100.55,\n        98.69,  97.52, 103.43, 106.26, 111.58, 114.07, 117.47, 121.18,\n       123.42, 125.89, 126.66, 123.1 , 125.22, 124.37, 123.88, 122.64,\n       116.71, 117.22, 107.29, 104.12, 104.76, 100.95, 103.69, 104.95,\n       107.42, 115.38, 117.6 , 114.36, 114.83, 113.22, 117.25, 115.39,\n       114.86, 115.38, 121.61, 121.8 , 119.26, 118.15, 115.79, 115.14,\n       120.34, 121.83, 124.95, 129.42, 131.38, 131.  , 133.66, 136.3 ,\n       128.74, 131.58, 136.87, 137.28, 138.  , 141.78, 137.46, 138.46,\n       140.8 , 140.05, 138.9 , 136.81])</pre></li><li>close(time)float6414.32 14.75 14.27 ... 141.2 139.2<pre>array([ 14.32,  14.75,  14.27,  14.86,  15.63,  15.91,  16.  ,  16.51,\n        16.9 ,  17.7 ,  17.38,  16.77,  17.84,  19.19,  19.27,  19.32,\n        19.8 ,  20.36,  19.16,  19.54,  20.94,  21.71,  21.1 ,  21.09,\n        22.17,  22.21,  22.34,  21.27,  21.79,  22.97,  22.76,  22.  ,\n        21.39,  20.66,  20.75,  23.66,  23.29,  23.5 ,  23.22,  22.7 ,\n        23.31,  23.89,  23.55,  23.29,  24.18,  23.44,  22.97,  22.97,\n        24.06,  24.23,  25.54,  25.73,  25.9 ,  26.2 ,  26.47,  27.19,\n        26.78,  26.53,  26.41,  26.98,  27.38,  27.78,  27.97,  27.45,\n        26.88,  27.04,  27.58,  27.17,  26.5 ,  26.46,  26.76,  27.  ,\n        27.67,  27.93,  27.1 ,  27.12,  27.04,  26.24,  26.96,  27.23,\n        27.75,  28.91,  28.21,  27.8 ,  27.56,  28.68,  29.15,  28.57,\n        28.89,  28.58,  28.34,  28.95,  29.21,  30.18,  31.68,  31.26,\n        31.18,  30.69,  30.54,  37.98,  38.95,  40.11,  37.83,  39.77,\n        39.33,  39.17,  38.65,  37.48,  38.51,  38.77,  39.48,  41.02,\n        43.  ,  42.65,  42.69,  43.81,  43.05,  43.03,  42.21,  40.63,\n        41.88,  41.12,  40.82,  42.3 ,  42.41,  42.32,  42.1 ,  42.5 ,\n        42.18,  42.41,  43.9 ,  45.98,  45.47,  46.46,  47.49,  47.08,\n        45.52,  44.31,  44.61,  45.68,  45.45,  45.9 ,  46.75,  46.73,\n        46.51,  44.27,  44.52,  44.68,  45.42,  44.66,  42.55,  42.39,\n        40.85,  43.75,  43.94,  43.49,  43.34,  43.3 ,  46.97,  45.67,\n...\n        90.37,  91.44,  94.29,  95.  ,  92.56,  90.25,  90.36,  90.36,\n        89.45,  88.96,  85.91,  88.01,  87.13,  85.35,  87.04,  90.62,\n        88.19,  86.  ,  87.42,  84.04,  84.67,  76.2 ,  79.52,  82.42,\n        79.68,  82.63,  87.74,  87.76,  86.4 ,  83.04,  85.82,  88.79,\n        92.14,  90.55,  90.41,  88.75,  89.88,  90.4 ,  91.36,  94.63,\n        94.36,  92.48,  94.78,  95.39,  94.95, 103.8 , 106.47, 113.9 ,\n       114.83, 110.5 , 109.63, 115.  , 116.44, 122.44, 121.  , 120.89,\n       121.79, 120.91, 125.2 , 129.61, 131.88, 130.98, 135.58, 130.78,\n       126.57, 118.11, 126.09, 126.4 , 123.99, 123.54, 124.3 , 122.67,\n       128.28, 125.83, 128.2 , 131.38, 134.91, 127.4 , 129.24, 128.44,\n       126.36, 117.99, 121.09, 117.93, 123.54, 122.59, 114.25, 112.28,\n       113.06, 111.59, 103.73, 117.02, 109.21, 107.27, 100.45, 104.25,\n        98.91, 104.97, 104.75, 109.02, 116.14, 118.08, 122.86, 124.58,\n       130.  , 127.25, 128.5 , 123.74, 129.37, 126.46, 128.3 , 125.61,\n       117.59, 119.37, 108.  , 106.21, 107.21, 102.83, 106.47, 108.1 ,\n       116.91, 119.14, 119.1 , 116.78, 115.59, 113.37, 117.87, 116.  ,\n       116.26, 120.87, 123.51, 124.04, 121.4 , 121.44, 117.  , 118.85,\n       122.85, 124.92, 127.72, 132.89, 132.65, 134.81, 134.8 , 138.07,\n       131.6 , 135.72, 136.93, 138.  , 143.71, 143.59, 139.56, 140.41,\n       141.54, 140.52, 141.25, 139.18])</pre></li><li>adjClose(time)float6414.31 14.74 14.26 ... 141.2 139.2<pre>array([ 14.31,  14.74,  14.26,  14.85,  15.62,  15.9 ,  15.99,  16.5 ,\n        16.89,  17.69,  17.37,  16.75,  17.83,  19.18,  19.25,  19.31,\n        19.79,  20.35,  19.15,  19.52,  20.93,  21.69,  21.09,  21.08,\n        22.16,  22.19,  22.32,  21.25,  21.77,  22.96,  22.75,  21.99,\n        21.37,  20.64,  20.74,  23.65,  23.27,  23.49,  23.2 ,  22.68,\n        23.3 ,  23.87,  23.54,  23.28,  24.17,  23.42,  22.95,  22.95,\n        24.05,  24.22,  25.53,  25.71,  25.89,  26.19,  26.46,  27.18,\n        26.77,  26.52,  26.4 ,  26.97,  27.37,  27.76,  27.95,  27.44,\n        26.87,  27.02,  27.57,  27.16,  26.48,  26.45,  26.74,  26.99,\n        27.65,  27.92,  27.09,  27.11,  27.03,  26.23,  26.94,  27.21,\n        27.74,  28.9 ,  28.2 ,  27.79,  27.55,  28.67,  29.14,  28.56,\n        28.87,  28.56,  28.33,  28.94,  29.2 ,  30.16,  31.66,  31.25,\n        31.16,  30.67,  30.52,  37.96,  38.93,  40.09,  37.82,  39.75,\n        39.31,  39.15,  38.64,  37.46,  38.5 ,  38.76,  39.47,  41.01,\n        42.98,  42.64,  42.68,  43.79,  43.03,  43.01,  42.19,  40.62,\n        41.86,  41.1 ,  40.81,  42.29,  42.4 ,  42.3 ,  42.09,  42.49,\n        42.16,  42.39,  43.89,  45.96,  45.45,  46.44,  47.48,  47.06,\n        45.5 ,  44.29,  44.59,  45.66,  45.43,  45.88,  46.73,  46.71,\n        46.49,  44.25,  44.5 ,  44.66,  45.4 ,  44.65,  42.54,  42.37,\n        40.84,  43.74,  43.92,  43.47,  43.33,  43.28,  46.95,  45.65,\n...\n        90.36,  91.42,  94.27,  94.99,  92.55,  90.23,  90.34,  90.35,\n        89.44,  88.95,  85.89,  87.99,  87.12,  85.34,  87.02,  90.6 ,\n        88.17,  85.99,  87.4 ,  84.02,  84.66,  76.19,  79.5 ,  82.41,\n        79.66,  82.62,  87.72,  87.74,  86.39,  83.03,  85.8 ,  88.77,\n        92.12,  90.54,  90.4 ,  88.73,  89.86,  90.38,  91.34,  94.61,\n        94.34,  92.46,  94.76,  95.37,  94.93, 103.78, 106.45, 113.88,\n       114.81, 110.48, 109.61, 114.98, 116.42, 122.42, 120.98, 120.87,\n       121.77, 120.9 , 125.19, 129.6 , 131.87, 130.97, 135.57, 130.77,\n       126.56, 118.1 , 126.08, 126.39, 123.98, 123.53, 124.29, 122.66,\n       128.27, 125.82, 128.19, 131.37, 134.9 , 127.39, 129.23, 128.43,\n       126.35, 117.98, 121.08, 117.92, 123.53, 122.58, 114.24, 112.27,\n       113.05, 111.58, 103.72, 117.01, 109.2 , 107.26, 100.44, 104.24,\n        98.9 , 104.96, 104.74, 109.01, 116.13, 118.07, 122.85, 124.57,\n       129.99, 127.24, 128.49, 123.73, 129.36, 126.45, 128.29, 125.6 ,\n       117.58, 119.36, 107.99, 106.2 , 107.2 , 102.82, 106.46, 108.09,\n       116.9 , 119.14, 119.1 , 116.78, 115.59, 113.37, 117.87, 116.  ,\n       116.26, 120.87, 123.51, 124.04, 121.4 , 121.44, 117.  , 118.85,\n       122.85, 124.92, 127.72, 132.89, 132.65, 134.81, 134.8 , 138.07,\n       131.6 , 135.72, 136.93, 138.  , 143.71, 143.59, 139.56, 140.41,\n       141.54, 140.52, 141.25, 139.18])</pre></li><li>volume(time)int64401277000 431324000 ... 161917686<pre>array([ 401277000,  431324000,  389168110,  405044000,  504231000,\n        384101260,  353285000,  551409060,  447287060,  511102160,\n        439624000,  452932000,  564967120,  655163000,  496204100,\n        449537110,  489535420,  542142000,  488611150,  498017000,\n        660477040,  564276000,  429366000,  452197090,  664150000,\n        559651220,  523876000,  550737000,  474919000,  675474000,\n        421188260,  412026280,  465888000,  410015000,  513184320,\n       1117995410,  589716000,  452994000,  455963000,  460026000,\n        390074650,  412393300,  437429230,  515154000,  513573390,\n        501257000,  474866000,  421890320,  474910130,  524486000,\n        584946260,  848547000,  432747190,  547408000,  797295110,\n        564889000,  455414070,  361026000,  356104000,  393694000,\n        364516000,  433933000,  398716000,  368592000,  515015000,\n        397654340,  395279000,  314378170,  446259000,  353615280,\n        395660130,  321471300,  604812000,  358660410,  427713260,\n        345103000,  339282000,  378527160,  406337000,  377161190,\n        292216140,  570329000,  402730000,  383387400,  321850410,\n        361494080,  344979000,  314869460,  369350000,  322149030,\n        274222250,  293926000,  449405000,  432535410,  748725010,\n        473908000,  372000000,  356253260,  721419000, 1543911000,\n...\n        314162700,  222551200,  299595001,  260704537,  309320400,\n        288504444,  294335100,  517768425,  655484700,  476060900,\n        425787500,  362975918,  252571700,  315516740,  284885534,\n        218374000,  215749000,  214176700,  237677322,  287020820,\n        248978600,  374782738,  252680535,  208326200,  214769515,\n        390086200,  320979530,  217223800,  258068943,  173911000,\n        327776900,  460067019,  293399100,  248152100,  486833300,\n        473174200,  523462326,  482027500,  552842400,  409012100,\n        411440423,  391910023,  290844200,  325559900,  312646700,\n        339246407,  318086700,  302589900,  318333600,  300087415,\n        257883600,  376189100,  323230332,  331964700,  303134600,\n        448101115,  453023305,  333751600,  477155100,  372470300,\n        306850700,  413638100,  273912015,  268283736,  441422400,\n        367100500,  238358328,  248772308,  231925900,  310318937,\n        293506438,  382462428,  206228500,  354966800,  284692948,\n        302582900,  271009200,  227053651,  302094500,  221845900,\n        277118000,  244465552,  346250233,  285722500,  246191612,\n        242311337,  170209500,  232347700,  377831021,  264879720,\n        306435921,  176090200,  264554514,  226311600,  285930038,\n        172354900,  205122109,  173586745,  157593634,  161917686])</pre></li><li>unadjustedVolume(time)int64401277000 431324000 ... 161917686<pre>array([ 401277000,  431324000,  389168110,  405044000,  504231000,\n        384101260,  353285000,  551409060,  447287060,  511102160,\n        439624000,  452932000,  564967120,  655163000,  496204100,\n        449537110,  489535420,  542142000,  488611150,  498017000,\n        660477040,  564276000,  429366000,  452197090,  664150000,\n        559651220,  523876000,  550737000,  474919000,  675474000,\n        421188260,  412026280,  465888000,  410015000,  513184320,\n       1117995410,  589716000,  452994000,  455963000,  460026000,\n        390074650,  412393300,  437429230,  515154000,  513573390,\n        501257000,  474866000,  421890320,  474910130,  524486000,\n        584946260,  848547000,  432747190,  547408000,  797295110,\n        564889000,  455414070,  361026000,  356104000,  393694000,\n        364516000,  433933000,  398716000,  368592000,  515015000,\n        397654340,  395279000,  314378170,  446259000,  353615280,\n        395660130,  321471300,  604812000,  358660410,  427713260,\n        345103000,  339282000,  378527160,  406337000,  377161190,\n        292216140,  570329000,  402730000,  383387400,  321850410,\n        361494080,  344979000,  314869460,  369350000,  322149030,\n        274222250,  293926000,  449405000,  432535410,  748725010,\n        473908000,  372000000,  356253260,  721419000, 1543911000,\n...\n        314162700,  222551200,  299595001,  260704537,  309320400,\n        288504444,  294335100,  517768425,  655484700,  476060900,\n        425787500,  362975918,  252571700,  315516740,  284885534,\n        218374000,  215749000,  214176700,  237677322,  287020820,\n        248978600,  374782738,  252680535,  208326200,  214769515,\n        390086200,  320979530,  217223800,  258068943,  173911000,\n        327776900,  460067019,  293399100,  248152100,  486833300,\n        473174200,  523462326,  482027500,  552842400,  409012100,\n        411440423,  391910023,  290844200,  325559900,  312646700,\n        339246407,  318086700,  302589900,  318333600,  300087415,\n        257883600,  376189100,  323230332,  331964700,  303134600,\n        448101115,  453023305,  333751600,  477155100,  372470300,\n        306850700,  413638100,  273912015,  268283736,  441422400,\n        367100500,  238358328,  248772308,  231925900,  310318937,\n        293506438,  382462428,  206228500,  354966800,  284692948,\n        302582900,  271009200,  227053651,  302094500,  221845900,\n        277118000,  244465552,  346250233,  285722500,  246191612,\n        242311337,  170209500,  232347700,  377831021,  264879720,\n        306435921,  176090200,  264554514,  226311600,  285930038,\n        172354900,  205122109,  173586745,  157593634,  161917686])</pre></li><li>change(time)float64-0.536 0.182 -0.226 ... 0.965 -0.36<pre>array([-0.536  ,  0.182  , -0.226  ,  0.385  ,  0.344  ,  0.402  ,\n        0.16149,  0.411  ,  0.621  ,  0.803  , -0.29   , -0.271  ,\n        0.828  ,  1.13   ,  0.438  ,  0.4105 ,  0.101  ,  0.903  ,\n       -0.788  ,  0.3675 ,  1.25   ,  0.709  ,  0.1    ,  0.283  ,\n        0.791  , -0.182  , -0.269  , -0.425  ,  0.25   ,  1.39   ,\n        0.215  , -0.131  , -0.243  , -0.345  ,  0.047  ,  0.224  ,\n        0.061  , -0.169  , -0.156  , -0.494  ,  0.826  ,  0.57   ,\n       -0.337  , -0.312  ,  0.694  , -0.739  , -0.444  ,  0.214  ,\n        0.567  ,  0.467  ,  1.51   , -0.257  ,  0.285  ,  0.019  ,\n        0.043  ,  0.0755 , -0.252  , -0.306  , -0.037  ,  0.159  ,\n        0.154  ,  0.637  ,  0.456  , -0.513  ,  0.052  ,  0.453  ,\n        0.756  , -0.5545 , -0.875  , -0.271  ,  0.254  ,  0.4365 ,\n        0.1335 ,  0.57   , -0.567  ,  0.167  ,  0.029  , -0.837  ,\n       -0.046  , -0.137  ,  0.524  ,  1.07   , -0.47   , -0.038  ,\n       -0.089  ,  0.8545 ,  0.629  , -0.328  , -0.12   , -0.318  ,\n       -0.189  ,  0.4445 ,  0.372  ,  0.594  ,  1.27   , -0.272  ,\n        0.275  , -0.312  ,  0.328  , -0.543  ,  1.06   , -0.484  ,\n       -1.65   ,  1.28   , -0.77   ,  0.262  , -0.176  , -1.44   ,\n        0.786  , -0.267  ,  0.282  ,  0.836  ,  2.17   ,  0.051  ,\n       -0.758  ,  0.81   , -0.456  ,  0.772  , -0.255  , -1.83   ,\n...\n        1.76   ,  2.16   , -0.551  , -1.89   ,  1.03   ,  1.79   ,\n       -0.509  ,  1.77   ,  2.02   ,  3.66   ,  1.78   , -4.15   ,\n       -2.89   ,  1.38   ,  0.721  ,  4.07   , -3.05   ,  1.12   ,\n        1.42   , -0.86   ,  2.14   ,  0.22   ,  1.92   , -2.01   ,\n        4.44   , -9.02   , -0.55   , -5.13   ,  4.89   ,  0.27   ,\n       -0.11   , -1.04   ,  0.83   ,  1.54   ,  6.62   , -1.55   ,\n        0.71   ,  1.03   ,  0.88   , -8.35   ,  0.98   , -2.12   ,\n       -2.08   , -3.36   , -0.76   , -2.42   ,  3.19   , -0.19   ,\n       -4.92   , -0.76   , -3.13   , -2.1    , -7.79   ,  4.12   ,\n       -8.32   ,  3.51   ,  8.39   ,  0.41   , -8.9    ,  2.97   ,\n       -0.89   ,  2.7    ,  3.7    , -0.45   ,  4.1    ,  2.64   ,\n        5.72   , -1.15   ,  1.19   , -6.28   ,  3.51   , -3.11   ,\n        3.25   , -2.51   , -3.77   , -0.16   , -8.01   ,  0.8    ,\n        2.22   , -5.21   ,  1.59   ,  0.29   ,  7.52   ,  2.3    ,\n        0.02   , -0.01   , -2.58   , -2.52   ,  0.52   , -1.06   ,\n       -0.29   ,  4.36   ,  1.49   , -2.76   , -2.57   ,  3.13   ,\n       -4.77   ,  2.41   ,  1.93   , -0.02   ,  2.73   ,  2.63   ,\n       -1.46   ,  2.9    ,  0.79   ,  1.6    , -6.27   ,  1.74   ,\n       -2.41   , -0.665  ,  5.58   ,  0.68   , -2.47   , -0.41   ,\n        0.61   , -2.48   ,  0.965  , -0.36   ])</pre></li><li>changePercent(time)float64-3.57 1.24 -1.52 ... 0.6843 -0.258<pre>array([-3.570000e+00,  1.240000e+00, -1.520000e+00,  2.700000e+00,\n        2.290000e+00,  2.580000e+00,  1.010000e+00,  2.550000e+00,\n        3.810000e+00,  4.730000e+00, -1.640000e+00, -1.580000e+00,\n        4.880000e+00,  6.260000e+00,  2.340000e+00,  2.170000e+00,\n        5.076100e-01,  4.620000e+00, -3.960000e+00,  1.930000e+00,\n        6.350000e+00,  3.380000e+00,  4.761900e-01,  1.350000e+00,\n        3.700000e+00, -8.039300e-01, -1.190000e+00, -1.940000e+00,\n        1.160000e+00,  6.440000e+00,  9.312600e-01, -5.874400e-01,\n       -1.110000e+00, -1.620000e+00,  1.931400e-01,  9.385700e-01,\n        2.582900e-01, -7.182100e-01, -6.418500e-01, -2.110000e+00,\n        3.650000e+00,  2.440000e+00, -1.420000e+00, -1.310000e+00,\n        2.940000e+00, -3.060000e+00, -1.880000e+00,  9.670300e-01,\n        2.380000e+00,  1.980000e+00,  6.280000e+00, -9.622800e-01,\n        1.090000e+00,  7.639419e-02,  1.513400e-01,  2.581100e-01,\n       -9.249000e-01, -1.150000e+00, -1.512300e-01,  5.590800e-01,\n        5.508600e-01,  2.360000e+00,  1.670000e+00, -1.860000e+00,\n        1.863600e-01,  1.730000e+00,  2.830000e+00, -1.980000e+00,\n       -3.180000e+00, -1.010000e+00,  9.811300e-01,  1.620000e+00,\n        5.085400e-01,  2.080000e+00, -2.060000e+00,  6.308000e-01,\n        1.110700e-01, -3.100000e+00, -1.481500e-01, -4.751500e-01,\n...\n        6.565700e-01, -6.150000e+00,  7.640700e-01, -1.620000e+00,\n       -1.620000e+00, -2.770000e+00, -6.237200e-01, -2.010000e+00,\n        2.650000e+00, -1.547500e-01, -4.130000e+00, -6.723300e-01,\n       -2.690000e+00, -1.850000e+00, -6.990000e+00,  3.650000e+00,\n       -7.080000e+00,  3.380000e+00,  9.110000e+00,  3.948400e-01,\n       -8.260000e+00,  2.910000e+00, -8.424800e-01,  2.540000e+00,\n        3.290000e+00, -3.796500e-01,  3.450000e+00,  2.160000e+00,\n        4.600000e+00, -8.956400e-01,  9.268000e-01, -4.830000e+00,\n        2.790000e+00, -2.400000e+00,  2.600000e+00, -1.960000e+00,\n       -3.110000e+00, -1.338600e-01, -6.900000e+00,  7.589400e-01,\n        2.110000e+00, -4.820000e+00,  1.520000e+00,  2.689900e-01,\n        6.870000e+00,  1.970000e+00,  1.679543e-02, -8.562380e-03,\n       -2.180000e+00, -2.170000e+00,  4.431200e-01, -9.055200e-01,\n       -2.488200e-01,  3.730000e+00,  1.220000e+00, -2.180000e+00,\n       -2.070000e+00,  2.650000e+00, -3.920000e+00,  2.070000e+00,\n        1.600000e+00, -1.600768e-02,  2.180000e+00,  2.020000e+00,\n       -1.090000e+00,  2.200000e+00,  5.895100e-01,  1.170000e+00,\n       -4.550000e+00,  1.300000e+00, -1.730000e+00, -4.831600e-01,\n        4.040000e+00,  4.758200e-01, -1.740000e+00, -2.911500e-01,\n        4.328400e-01, -1.730000e+00,  6.843000e-01, -2.579900e-01])</pre></li><li>vwap(time)float6414.57 14.6 14.37 ... 140.7 139.0<pre>array([ 14.5675,  14.6025,  14.3675,  14.5925,  15.5275,  15.7125,\n        15.8575,  16.185 ,  16.5675,  17.3075,  17.55  ,  16.935 ,\n        17.385 ,  18.58  ,  19.105 ,  19.045 ,  19.7375,  19.965 ,\n        19.6   ,  19.3375,  20.3575,  21.34  ,  21.1575,  21.065 ,\n        21.74  ,  22.3725,  22.5225,  21.4625,  21.585 ,  22.2425,\n        22.57  ,  22.1525,  21.435 ,  20.9425,  20.745 ,  23.505 ,\n        23.235 ,  23.625 ,  23.4075,  22.915 ,  22.9025,  23.56  ,\n        23.795 ,  23.565 ,  23.8225,  23.8625,  23.185 ,  22.83  ,\n        23.81  ,  23.91  ,  24.7625,  25.945 ,  25.6675,  26.0375,\n        26.6825,  27.125 ,  26.835 ,  26.685 ,  26.305 ,  26.8725,\n        27.3025,  27.465 ,  27.705 ,  27.6825,  26.7775,  26.7825,\n        27.1725,  27.4525,  26.9475,  26.6025,  26.59  ,  26.7525,\n        27.6675,  27.63  ,  27.45  ,  26.9925,  27.0225,  26.7   ,\n        27.    ,  27.18  ,  27.4525,  28.3975,  28.4525,  27.87  ,\n        27.5775,  28.25  ,  28.81  ,  28.7225,  28.8675,  28.67  ,\n        28.425 ,  28.645 ,  29.1875,  29.8475,  31.06  ,  31.325 ,\n        31.07  ,  30.9025,  30.2925,  38.155 ,  38.39  ,  40.65  ,\n        38.86  ,  39.1625,  39.7475,  39.09  ,  38.6975,  38.315 ,\n        38.15  ,  39.0225,  39.2075,  40.5125,  41.8425,  42.6725,\n        43.13  ,  43.3675,  43.0625,  42.735 ,  42.375 ,  41.4875,\n...\n        90.385 ,  93.39  ,  94.7975,  93.35  ,  94.2925,  94.3925,\n        94.92  , 103.4175, 105.1   , 112.24  , 113.5675, 112.6575,\n       110.4525, 113.905 , 115.7025, 120.1825, 122.24  , 120.0925,\n       120.5675, 121.0725, 124.4275, 128.99  , 130.75  , 131.82  ,\n       133.435 , 135.215 , 127.155 , 120.9625, 123.2775, 125.8125,\n       124.355 , 124.645 , 122.86  , 122.06  , 124.895 , 126.935 ,\n       128.375 , 131.05  , 134.115 , 131.5875, 129.16  , 129.3925,\n       127.105 , 119.4775, 120.475 , 119.3125, 121.955 , 123.04  ,\n       116.7025, 112.0625, 114.2575, 113.215 , 107.445 , 114.785 ,\n       113.4275, 105.28  ,  96.6525, 104.0875, 103.5525, 102.4975,\n       105.105 , 108.1675, 114.0975, 117.32  , 120.5825, 123.175 ,\n       126.925 , 127.855 , 127.9575, 126.9025, 127.5125, 127.915 ,\n       126.6075, 126.175 , 120.0225, 119.4675, 111.8775, 107.2525,\n       106.6525, 104.9925, 105.3975, 107.565 , 112.7275, 118.0375,\n       118.935 , 116.5275, 116.8475, 115.045 , 118.0325, 116.7675,\n       116.165 , 118.6425, 123.02  , 125.0775, 122.165 , 119.85  ,\n       119.25  , 117.4525, 122.1175, 124.1825, 127.075 , 131.5125,\n       133.165 , 133.18  , 134.5625, 137.61  , 134.195 , 134.475 ,\n       138.5075, 138.2125, 140.8875, 143.175 , 140.37  , 140.26  ,\n       141.85  , 141.6775, 140.675 , 138.965 ])</pre></li><li>label(time)&lt;U16'January 03, 23' ... 'October 30...<pre>array(['January 03, 23', 'January 04, 23', 'January 05, 23',\n       'January 06, 23', 'January 09, 23', 'January 10, 23',\n       'January 11, 23', 'January 12, 23', 'January 13, 23',\n       'January 17, 23', 'January 18, 23', 'January 19, 23',\n       'January 20, 23', 'January 23, 23', 'January 24, 23',\n       'January 25, 23', 'January 26, 23', 'January 27, 23',\n       'January 30, 23', 'January 31, 23', 'February 01, 23',\n       'February 02, 23', 'February 03, 23', 'February 06, 23',\n       'February 07, 23', 'February 08, 23', 'February 09, 23',\n       'February 10, 23', 'February 13, 23', 'February 14, 23',\n       'February 15, 23', 'February 16, 23', 'February 17, 23',\n       'February 21, 23', 'February 22, 23', 'February 23, 23',\n       'February 24, 23', 'February 27, 23', 'February 28, 23',\n       'March 01, 23', 'March 02, 23', 'March 03, 23', 'March 06, 23',\n       'March 07, 23', 'March 08, 23', 'March 09, 23', 'March 10, 23',\n       'March 13, 23', 'March 14, 23', 'March 15, 23', 'March 16, 23',\n       'March 17, 23', 'March 20, 23', 'March 21, 23', 'March 22, 23',\n       'March 23, 23', 'March 24, 23', 'March 27, 23', 'March 28, 23',\n       'March 29, 23', 'March 30, 23', 'March 31, 23', 'April 03, 23',\n       'April 04, 23', 'April 05, 23', 'April 06, 23', 'April 10, 23',\n...\n       'July 30, 24', 'July 31, 24', 'August 01, 24', 'August 02, 24',\n       'August 05, 24', 'August 06, 24', 'August 07, 24', 'August 08, 24',\n       'August 09, 24', 'August 12, 24', 'August 13, 24', 'August 14, 24',\n       'August 15, 24', 'August 16, 24', 'August 19, 24', 'August 20, 24',\n       'August 21, 24', 'August 22, 24', 'August 23, 24', 'August 26, 24',\n       'August 27, 24', 'August 28, 24', 'August 29, 24', 'August 30, 24',\n       'September 03, 24', 'September 04, 24', 'September 05, 24',\n       'September 06, 24', 'September 09, 24', 'September 10, 24',\n       'September 11, 24', 'September 12, 24', 'September 13, 24',\n       'September 16, 24', 'September 17, 24', 'September 18, 24',\n       'September 19, 24', 'September 20, 24', 'September 23, 24',\n       'September 24, 24', 'September 25, 24', 'September 26, 24',\n       'September 27, 24', 'September 30, 24', 'October 01, 24',\n       'October 02, 24', 'October 03, 24', 'October 04, 24',\n       'October 07, 24', 'October 08, 24', 'October 09, 24',\n       'October 10, 24', 'October 11, 24', 'October 14, 24',\n       'October 15, 24', 'October 16, 24', 'October 17, 24',\n       'October 18, 24', 'October 21, 24', 'October 22, 24',\n       'October 23, 24', 'October 24, 24', 'October 25, 24',\n       'October 28, 24', 'October 29, 24', 'October 30, 24'], dtype='&lt;U16')</pre></li><li>changeOverTime(time)float64-0.0357 0.0124 ... -0.00258<pre>array([-3.570000e-02,  1.240000e-02, -1.520000e-02,  2.700000e-02,\n        2.290000e-02,  2.580000e-02,  1.010000e-02,  2.550000e-02,\n        3.810000e-02,  4.730000e-02, -1.640000e-02, -1.580000e-02,\n        4.880000e-02,  6.260000e-02,  2.340000e-02,  2.170000e-02,\n        5.076100e-03,  4.620000e-02, -3.960000e-02,  1.930000e-02,\n        6.350000e-02,  3.380000e-02,  4.761900e-03,  1.350000e-02,\n        3.700000e-02, -8.039300e-03, -1.190000e-02, -1.940000e-02,\n        1.160000e-02,  6.440000e-02,  9.312600e-03, -5.874400e-03,\n       -1.110000e-02, -1.620000e-02,  1.931400e-03,  9.385700e-03,\n        2.582900e-03, -7.182100e-03, -6.418500e-03, -2.110000e-02,\n        3.650000e-02,  2.440000e-02, -1.420000e-02, -1.310000e-02,\n        2.940000e-02, -3.060000e-02, -1.880000e-02,  9.670300e-03,\n        2.380000e-02,  1.980000e-02,  6.280000e-02, -9.622800e-03,\n        1.090000e-02,  7.639419e-04,  1.513400e-03,  2.581100e-03,\n       -9.249000e-03, -1.150000e-02, -1.512300e-03,  5.590800e-03,\n        5.508600e-03,  2.360000e-02,  1.670000e-02, -1.860000e-02,\n        1.863600e-03,  1.730000e-02,  2.830000e-02, -1.980000e-02,\n       -3.180000e-02, -1.010000e-02,  9.811300e-03,  1.620000e-02,\n        5.085400e-03,  2.080000e-02, -2.060000e-02,  6.308000e-03,\n        1.110700e-03, -3.100000e-02, -1.481500e-03, -4.751500e-03,\n...\n        6.565700e-03, -6.150000e-02,  7.640700e-03, -1.620000e-02,\n       -1.620000e-02, -2.770000e-02, -6.237200e-03, -2.010000e-02,\n        2.650000e-02, -1.547500e-03, -4.130000e-02, -6.723300e-03,\n       -2.690000e-02, -1.850000e-02, -6.990000e-02,  3.650000e-02,\n       -7.080000e-02,  3.380000e-02,  9.110000e-02,  3.948400e-03,\n       -8.260000e-02,  2.910000e-02, -8.424800e-03,  2.540000e-02,\n        3.290000e-02, -3.796500e-03,  3.450000e-02,  2.160000e-02,\n        4.600000e-02, -8.956400e-03,  9.268000e-03, -4.830000e-02,\n        2.790000e-02, -2.400000e-02,  2.600000e-02, -1.960000e-02,\n       -3.110000e-02, -1.338600e-03, -6.900000e-02,  7.589400e-03,\n        2.110000e-02, -4.820000e-02,  1.520000e-02,  2.689900e-03,\n        6.870000e-02,  1.970000e-02,  1.679543e-04, -8.562380e-05,\n       -2.180000e-02, -2.170000e-02,  4.431200e-03, -9.055200e-03,\n       -2.488200e-03,  3.730000e-02,  1.220000e-02, -2.180000e-02,\n       -2.070000e-02,  2.650000e-02, -3.920000e-02,  2.070000e-02,\n        1.600000e-02, -1.600768e-04,  2.180000e-02,  2.020000e-02,\n       -1.090000e-02,  2.200000e-02,  5.895100e-03,  1.170000e-02,\n       -4.550000e-02,  1.300000e-02, -1.730000e-02, -4.831600e-03,\n        4.040000e-02,  4.758200e-03, -1.740000e-02, -2.911500e-03,\n        4.328400e-03, -1.730000e-02,  6.843000e-03, -2.579900e-03])</pre></li></ul></li><li>Indexes: (1)<ul><li>timePandasIndex<pre>PandasIndex(DatetimeIndex(['2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06',\n               '2023-01-09', '2023-01-10', '2023-01-11', '2023-01-12',\n               '2023-01-13', '2023-01-17',\n               ...\n               '2024-10-17', '2024-10-18', '2024-10-21', '2024-10-22',\n               '2024-10-23', '2024-10-24', '2024-10-25', '2024-10-28',\n               '2024-10-29', '2024-10-30'],\n              dtype='datetime64[ns]', name='time', length=460, freq=None))</pre></li></ul></li><li>Attributes: (0)</li></ul> In\u00a0[26]: Copied! <pre># convert to dataframe\nnvdf = nvda.to_dataframe()\n</pre> # convert to dataframe nvdf = nvda.to_dataframe() In\u00a0[27]: Copied! <pre>nvdf\n</pre> nvdf Out[27]: open high low close adjClose volume unadjustedVolume change changePercent vwap label changeOverTime time 2023-01-03 14.85 15.00 14.10 14.32 14.31 401277000 401277000 -0.536 -3.57000 14.5675 January 03, 23 -0.035700 2023-01-04 14.57 14.85 14.24 14.75 14.74 431324000 431324000 0.182 1.24000 14.6025 January 04, 23 0.012400 2023-01-05 14.49 14.56 14.15 14.27 14.26 389168110 389168110 -0.226 -1.52000 14.3675 January 05, 23 -0.015200 2023-01-06 14.47 15.01 14.03 14.86 14.85 405044000 405044000 0.385 2.70000 14.5925 January 06, 23 0.027000 2023-01-09 15.28 16.06 15.14 15.63 15.62 504231000 504231000 0.344 2.29000 15.5275 January 09, 23 0.022900 ... ... ... ... ... ... ... ... ... ... ... ... ... 2024-10-24 140.82 141.35 138.46 140.41 140.41 172354900 172354900 -0.410 -0.29115 140.2600 October 24, 24 -0.002912 2024-10-25 140.93 144.13 140.80 141.54 141.54 205122109 205122109 0.610 0.43284 141.8500 October 25, 24 0.004328 2024-10-28 143.00 143.14 140.05 140.52 140.52 173586745 173586745 -2.480 -1.73000 141.6775 October 28, 24 -0.017300 2024-10-29 140.29 142.26 138.90 141.25 141.25 157593634 157593634 0.965 0.68430 140.6750 October 29, 24 0.006843 2024-10-30 139.54 140.33 136.81 139.18 139.18 161917686 161917686 -0.360 -0.25799 138.9650 October 30, 24 -0.002580 <p>460 rows \u00d7 12 columns</p> In\u00a0[28]: Copied! <pre># find golden cross\nnvdf['SMA_50'] = nvdf['close'].rolling(window=50).mean()\nnvdf['SMA_200'] = nvdf['close'].rolling(window=200).mean()\n\n# Create a new column to identify golden cross\nnvdf['Golden_Cross'] = np.where(nvdf['SMA_50'] &gt; nvdf['SMA_200'], 1, 0)\n\n# Create a new column to identify death cross\nnvdf['Death_Cross'] = np.where(nvdf['SMA_50'] &lt; nvdf['SMA_200'], 1, 0)\n\n# Create a new column to identify crossovers\nnvdf['Crossover'] = nvdf['Golden_Cross'].diff()\n\n# Filter for golden cross and death cross dates\ngolden_cross_dates = nvdf[nvdf['Crossover'] == 1].index\ndeath_cross_dates = nvdf[nvdf['Crossover'] == -1].index\n\n# Print the dates of golden and death crosses\nprint(\"Golden Cross Dates:\")\nprint(golden_cross_dates)\n\nprint(\"Death Cross Dates:\")\nprint(death_cross_dates)\n\n# Plotting the stock price and moving averages\nfig = go.Figure()\n\n# Add stock price trace\nfig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['close'], mode='lines', name='NVDA Price'))\n\n# Add SMA traces\nfig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['SMA_50'], mode='lines', name='SMA 50'))\nfig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['SMA_200'], mode='lines', name='SMA 200'))\n\n# Add vertical lines for golden and death crosses\nfor date in golden_cross_dates:\n    fig.add_vline(x=date, line_color='green', line_width=2, line_dash='dash', name='Golden Cross')\n\nfor date in death_cross_dates:\n    fig.add_vline(x=date, line_color='red', line_width=2, line_dash='dash', name='Death Cross')\n\n# Update layout\nfig.update_layout(title='NVDA Price with Golden and Death Crosses',\n                  xaxis_title='Date',\n                  yaxis_title='Price',\n                  legend_title='Legend')\n\n# Show the plot\nfig.show()\n</pre> # find golden cross nvdf['SMA_50'] = nvdf['close'].rolling(window=50).mean() nvdf['SMA_200'] = nvdf['close'].rolling(window=200).mean()  # Create a new column to identify golden cross nvdf['Golden_Cross'] = np.where(nvdf['SMA_50'] &gt; nvdf['SMA_200'], 1, 0)  # Create a new column to identify death cross nvdf['Death_Cross'] = np.where(nvdf['SMA_50'] &lt; nvdf['SMA_200'], 1, 0)  # Create a new column to identify crossovers nvdf['Crossover'] = nvdf['Golden_Cross'].diff()  # Filter for golden cross and death cross dates golden_cross_dates = nvdf[nvdf['Crossover'] == 1].index death_cross_dates = nvdf[nvdf['Crossover'] == -1].index  # Print the dates of golden and death crosses print(\"Golden Cross Dates:\") print(golden_cross_dates)  print(\"Death Cross Dates:\") print(death_cross_dates)  # Plotting the stock price and moving averages fig = go.Figure()  # Add stock price trace fig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['close'], mode='lines', name='NVDA Price'))  # Add SMA traces fig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['SMA_50'], mode='lines', name='SMA 50')) fig.add_trace(go.Scatter(x=nvdf.index, y=nvdf['SMA_200'], mode='lines', name='SMA 200'))  # Add vertical lines for golden and death crosses for date in golden_cross_dates:     fig.add_vline(x=date, line_color='green', line_width=2, line_dash='dash', name='Golden Cross')  for date in death_cross_dates:     fig.add_vline(x=date, line_color='red', line_width=2, line_dash='dash', name='Death Cross')  # Update layout fig.update_layout(title='NVDA Price with Golden and Death Crosses',                   xaxis_title='Date',                   yaxis_title='Price',                   legend_title='Legend')  # Show the plot fig.show() <pre>Golden Cross Dates:\nDatetimeIndex(['2023-10-18'], dtype='datetime64[ns]', name='time', freq=None)\nDeath Cross Dates:\nDatetimeIndex([], dtype='datetime64[ns]', name='time', freq=None)\n</pre> In\u00a0[29]: Copied! <pre># find distribution of returns\nnvdf['Returns'] = nvdf['close'].pct_change()\nnvdf['Volatility'] = nvdf['Returns'].rolling(window=21).std() * np.sqrt(252)  # Annualized volatility\n\n# Calculate the mean and standard deviation of returns\nmean_return = nvdf['Returns'].mean()\nstd_return = nvdf['Returns'].std()\n\n# Print the mean and standard deviation of returns\nprint(\"Mean Return:\", mean_return)\nprint(\"Standard Deviation of Returns:\", std_return)\n\n# Calculate the Sharpe Ratio\nrisk_free_rate = 0.01  # Example risk-free rate\nsharpe_ratio = (mean_return - risk_free_rate) / std_return\nprint(\"Sharpe Ratio:\", sharpe_ratio)\n\n# Calculate the maximum drawdown\nnvdf['Cumulative_Returns'] = (1 + nvdf['Returns']).cumprod()\nnvdf['Drawdown'] = nvdf['Cumulative_Returns'] / nvdf['Cumulative_Returns'].cummax() - 1\nmax_drawdown = nvdf['Drawdown'].min()\nprint(\"Maximum Drawdown:\", max_drawdown)\n\n# Calculate the Value at Risk (VaR)\nconfidence_level = 0.95\nvar = -nvdf['Returns'].quantile(1 - confidence_level)\nprint(\"Value at Risk (VaR):\", var)\n</pre> # find distribution of returns nvdf['Returns'] = nvdf['close'].pct_change() nvdf['Volatility'] = nvdf['Returns'].rolling(window=21).std() * np.sqrt(252)  # Annualized volatility  # Calculate the mean and standard deviation of returns mean_return = nvdf['Returns'].mean() std_return = nvdf['Returns'].std()  # Print the mean and standard deviation of returns print(\"Mean Return:\", mean_return) print(\"Standard Deviation of Returns:\", std_return)  # Calculate the Sharpe Ratio risk_free_rate = 0.01  # Example risk-free rate sharpe_ratio = (mean_return - risk_free_rate) / std_return print(\"Sharpe Ratio:\", sharpe_ratio)  # Calculate the maximum drawdown nvdf['Cumulative_Returns'] = (1 + nvdf['Returns']).cumprod() nvdf['Drawdown'] = nvdf['Cumulative_Returns'] / nvdf['Cumulative_Returns'].cummax() - 1 max_drawdown = nvdf['Drawdown'].min() print(\"Maximum Drawdown:\", max_drawdown)  # Calculate the Value at Risk (VaR) confidence_level = 0.95 var = -nvdf['Returns'].quantile(1 - confidence_level) print(\"Value at Risk (VaR):\", var) <pre>Mean Return: 0.005477226436174783\nStandard Deviation of Returns: 0.032427473928113154\nSharpe Ratio: -0.13947350860111793\nMaximum Drawdown: -0.2704676205930082\nValue at Risk (VaR): 0.03895994538006367\n</pre> In\u00a0[32]: Copied! <pre># plot histogram of returns\nfig2 = go.Figure()\nfig2.add_trace(go.Histogram(x=nvdf['Returns'].dropna(), nbinsx=200, name='Returns'))\nfig2.update_layout(title='Histogram of Returns', xaxis_title='Returns', yaxis_title='Frequency')\nfig2.show()\n</pre> # plot histogram of returns fig2 = go.Figure() fig2.add_trace(go.Histogram(x=nvdf['Returns'].dropna(), nbinsx=200, name='Returns')) fig2.update_layout(title='Histogram of Returns', xaxis_title='Returns', yaxis_title='Frequency') fig2.show() In\u00a0[34]: Copied! <pre># kde plot of returns\nfig3 = go.Figure()\nfig3.add_trace(go.Histogram(x=nvdf['Returns'].dropna(), nbinsx=200, name='Returns', histnorm='probability density'))\nfig3.update_layout(title='KDE of Returns', xaxis_title='Returns', yaxis_title='Density')\n# plot normal curve\nx = np.linspace(nvdf['Returns'].min(), nvdf['Returns'].max(), 100)\ny = (1 / (std_return * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean_return) / std_return) ** 2)\nfig3.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Normal Distribution', line=dict(color='red')))\n\n# Show the plot\nfig3.show()\n</pre> # kde plot of returns fig3 = go.Figure() fig3.add_trace(go.Histogram(x=nvdf['Returns'].dropna(), nbinsx=200, name='Returns', histnorm='probability density')) fig3.update_layout(title='KDE of Returns', xaxis_title='Returns', yaxis_title='Density') # plot normal curve x = np.linspace(nvdf['Returns'].min(), nvdf['Returns'].max(), 100) y = (1 / (std_return * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean_return) / std_return) ** 2) fig3.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Normal Distribution', line=dict(color='red')))  # Show the plot fig3.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/0.1.0-fraud-payment-eda/","title":"0.1.0 fraud payment eda","text":"In\u00a0[1]: Copied! <pre>import polars as pl\nimport numpy as np\n\ndf = pl.read_csv(\"../../data/Fraud_Payments/Data/fraud_payment_data/fraud_payment_data\")\n</pre> import polars as pl import numpy as np  df = pl.read_csv(\"../../data/Fraud_Payments/Data/fraud_payment_data/fraud_payment_data\") In\u00a0[2]: Copied! <pre>df\n</pre> df Out[2]: shape: (1_498_177, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typestrstrstrstrstri64strstrstrstrf64i64str\"2022-03-15 10:24:00\"\"EXCHANGE-10115\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10108\"\"USA\"35537\"CCB\"nullnullnull558.430\"WITHDRAWAL\"\"2022-03-15 10:24:00\"\"QUICK-PAYMENT-10116\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10109\"\"USA\"15287\"CCB\"\"CLIENT-10100\"\"ACCOUNT-10106\"\"CANADA\"622.780\"QUICK-PAYMENT\"\"2022-03-15 10:24:00\"\"DEPOSIT-CASH-9833\"nullnullnullnullnull\"JPMC-CLIENT-9812\"\"ACCOUNT-9826\"\"USA\"802.540\"DEPOSIT-CASH\"\"2022-03-15 10:24:00\"\"PAY-CHECK-9832\"\"JPMC-CLIENT-9812\"\"ACCOUNT-9825\"\"USA\"38145\"CCB\"\"JPMC-CLIENT-9814\"\"ACCOUNT-9824\"\"USA\"989.090\"PAY-CHECK\"\"2022-03-15 10:24:00\"\"DEPOSIT-CHECK-9806\"nullnullnullnullnull\"JPMC-CLIENT-9789\"\"ACCOUNT-9800\"\"USA\"786.780\"DEPOSIT-CHECK\"\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\"2054-09-14 13:17:24\"\"PAY-BILL-2180018\"\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179757\"\"USA\"24701\"CCB\"\"BILL-COMPANY-2179895\"\"ACCOUNT-2179896\"\"USA\"159.640\"MAKE-PAYMENT\"\"2054-09-15 00:57:24\"\"QUICK-PAYMENT-2181421\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"4953\"CCB\"\"CLIENT-2181279\"\"ACCOUNT-2181280\"\"USA\"120.070\"QUICK-PAYMENT\"\"2054-09-15 01:17:24\"\"PAYMENT-2180021\"\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179757\"\"USA\"34784\"CCB\"\"BILL-COMPANY-2180022\"\"ACCOUNT-2180023\"\"USA\"25.320\"MAKE-PAYMENT\"\"2054-09-15 12:57:24\"\"QUICK-PAYMENT-2181422\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"23822\"CCB\"\"CLIENT-2181279\"\"ACCOUNT-2181280\"\"USA\"610.910\"QUICK-PAYMENT\"\"2054-09-15 13:07:24\"\"QUICK-PAYMENT-2181423\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"15499\"CCB\"\"CLIENT-2181166\"\"ACCOUNT-2181167\"\"USA\"688.510\"QUICK-PAYMENT\" In\u00a0[3]: Copied! <pre>df = df.with_columns(\n    pl.col(\"Time_step\").str.to_datetime(format=\"%Y-%m-%d %H:%M:%S\")\n)\ndf\n</pre> df = df.with_columns(     pl.col(\"Time_step\").str.to_datetime(format=\"%Y-%m-%d %H:%M:%S\") ) df Out[3]: shape: (1_498_177, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typedatetime[\u03bcs]strstrstrstri64strstrstrstrf64i64str2022-03-15 10:24:00\"EXCHANGE-10115\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10108\"\"USA\"35537\"CCB\"nullnullnull558.430\"WITHDRAWAL\"2022-03-15 10:24:00\"QUICK-PAYMENT-10116\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10109\"\"USA\"15287\"CCB\"\"CLIENT-10100\"\"ACCOUNT-10106\"\"CANADA\"622.780\"QUICK-PAYMENT\"2022-03-15 10:24:00\"DEPOSIT-CASH-9833\"nullnullnullnullnull\"JPMC-CLIENT-9812\"\"ACCOUNT-9826\"\"USA\"802.540\"DEPOSIT-CASH\"2022-03-15 10:24:00\"PAY-CHECK-9832\"\"JPMC-CLIENT-9812\"\"ACCOUNT-9825\"\"USA\"38145\"CCB\"\"JPMC-CLIENT-9814\"\"ACCOUNT-9824\"\"USA\"989.090\"PAY-CHECK\"2022-03-15 10:24:00\"DEPOSIT-CHECK-9806\"nullnullnullnullnull\"JPMC-CLIENT-9789\"\"ACCOUNT-9800\"\"USA\"786.780\"DEPOSIT-CHECK\"\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u20262054-09-14 13:17:24\"PAY-BILL-2180018\"\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179757\"\"USA\"24701\"CCB\"\"BILL-COMPANY-2179895\"\"ACCOUNT-2179896\"\"USA\"159.640\"MAKE-PAYMENT\"2054-09-15 00:57:24\"QUICK-PAYMENT-2181421\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"4953\"CCB\"\"CLIENT-2181279\"\"ACCOUNT-2181280\"\"USA\"120.070\"QUICK-PAYMENT\"2054-09-15 01:17:24\"PAYMENT-2180021\"\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179757\"\"USA\"34784\"CCB\"\"BILL-COMPANY-2180022\"\"ACCOUNT-2180023\"\"USA\"25.320\"MAKE-PAYMENT\"2054-09-15 12:57:24\"QUICK-PAYMENT-2181422\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"23822\"CCB\"\"CLIENT-2181279\"\"ACCOUNT-2181280\"\"USA\"610.910\"QUICK-PAYMENT\"2054-09-15 13:07:24\"QUICK-PAYMENT-2181423\"\"JPMC-CLIENT-2181147\"\"ACCOUNT-2181158\"\"USA\"15499\"CCB\"\"CLIENT-2181166\"\"ACCOUNT-2181167\"\"USA\"688.510\"QUICK-PAYMENT\" In\u00a0[4]: Copied! <pre>df.describe()\n</pre> df.describe() Out[4]: shape: (9, 14)statisticTime_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typestrstrstrstrstrstrf64strstrstrstrf64f64str\"count\"\"1498177\"\"1498177\"\"1279291\"\"1279291\"\"1279291\"1.279291e6\"1279291\"\"1282284\"\"1282284\"\"1282284\"1.498177e61.498177e6\"1498177\"\"null_count\"\"0\"\"0\"\"218886\"\"218886\"\"218886\"218886.0\"218886\"\"215893\"\"215893\"\"215893\"0.00.0\"0\"\"mean\"\"2038-06-16 16:05:19.737898\"nullnullnullnull25021.33413nullnullnullnull513.4697770.020571null\"std\"nullnullnullnullnull14431.714191nullnullnullnull539.8089140.141943null\"min\"\"2022-03-15 10:24:00\"\"CASH-CHECK-1000067\"\"BILL-COMPANY-100003\"\"ACCOUNT-100004\"\"AFGHANISTAN\"0.0\"CCB\"\"BILL-COMPANY-100000\"\"ACCOUNT-1000001\"\"AFGHANISTAN\"0.00.0\"DEPOSIT-CASH\"\"25%\"\"2030-03-29 18:54:50\"nullnullnullnull12534.0nullnullnullnull138.690.0null\"50%\"\"2038-05-25 09:25:42\"nullnullnullnull25023.0nullnullnullnull404.160.0null\"75%\"\"2046-08-19 14:06:34\"nullnullnullnull37531.0nullnullnullnull734.070.0null\"max\"\"2054-09-15 13:07:24\"\"WITHDRAWAL-999990\"\"JPMC-COMPANY-999648\"\"ACCOUNT-999995\"\"ZIMBABWE\"49999.0\"CCB\"\"JPMC-COMPANY-999909\"\"ACCOUNT-999998\"\"ZIMBABWE\"19998.941.0\"WITHDRAWAL\" In\u00a0[5]: Copied! <pre>df.null_count()\n</pre> df.null_count() Out[5]: shape: (1, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typeu32u32u32u32u32u32u32u32u32u32u32u32u3200218886218886218886218886218886215893215893215893000 In\u00a0[6]: Copied! <pre># filter out rows with null values\ndf_nulled = df.filter(pl.col(\"Sender_Id\").is_null())\ndf_nulled\n</pre> # filter out rows with null values df_nulled = df.filter(pl.col(\"Sender_Id\").is_null()) df_nulled Out[6]: shape: (218_886, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typedatetime[\u03bcs]strstrstrstri64strstrstrstrf64i64str2022-03-15 10:24:00\"DEPOSIT-CASH-9833\"nullnullnullnullnull\"JPMC-CLIENT-9812\"\"ACCOUNT-9826\"\"USA\"802.540\"DEPOSIT-CASH\"2022-03-15 10:24:00\"DEPOSIT-CHECK-9806\"nullnullnullnullnull\"JPMC-CLIENT-9789\"\"ACCOUNT-9800\"\"USA\"786.780\"DEPOSIT-CHECK\"2022-03-15 10:24:00\"DEPOSIT-CASH-9781\"nullnullnullnullnull\"JPMC-CLIENT-9763\"\"ACCOUNT-9774\"\"USA\"792.190\"DEPOSIT-CASH\"2022-03-15 10:24:00\"DEPOSIT-CHECK-9504\"nullnullnullnullnull\"JPMC-CLIENT-9483\"\"ACCOUNT-9494\"\"USA\"942.830\"DEPOSIT-CHECK\"2022-03-15 10:24:00\"QUICK-DEPOSIT-8756\"nullnullnullnullnull\"JPMC-CLIENT-8736\"\"ACCOUNT-8747\"\"USA\"469.410\"DEPOSIT-CASH\"\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u20262054-09-13 00:37:24\"DEPOSIT-CHECK-2180011\"nullnullnullnullnull\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179824\"\"USA\"425.670\"DEPOSIT-CHECK\"2054-09-13 12:37:24\"QUICK-DEPOSIT-2180012\"nullnullnullnullnull\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179756\"\"USA\"706.060\"DEPOSIT-CASH\"2054-09-13 13:47:24\"DEPOSIT-CHECK-2185479\"nullnullnullnullnull\"JPMC-CLIENT-2185194\"\"ACCOUNT-2185210\"\"USA\"379.880\"DEPOSIT-CHECK\"2054-09-13 13:47:24\"QUICK-DEPOSIT-2182919\"nullnullnullnullnull\"JPMC-CLIENT-2182642\"\"ACCOUNT-2182718\"\"BERMUDA\"282.380\"DEPOSIT-CASH\"2054-09-14 01:07:24\"DEPOSIT-CHECK-2180015\"nullnullnullnullnull\"JPMC-CLIENT-2179746\"\"ACCOUNT-2179757\"\"USA\"950.260\"DEPOSIT-CHECK\" In\u00a0[7]: Copied! <pre># visualize outliers for time step column (horizontal violin plot)\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Violin(x=df[\"USD_amount\"].to_numpy(), box_visible=True, line_color='black', meanline_visible=True, fillcolor='lightseagreen', opacity=0.6, name='Time_step'))\nfig.show()\n</pre> # visualize outliers for time step column (horizontal violin plot) import plotly.graph_objects as go  fig = go.Figure() fig.add_trace(go.Violin(x=df[\"USD_amount\"].to_numpy(), box_visible=True, line_color='black', meanline_visible=True, fillcolor='lightseagreen', opacity=0.6, name='Time_step')) fig.show() In\u00a0[8]: Copied! <pre>for col in df.columns:\n    print(col)\n    print(df[col].value_counts())\n</pre> for col in df.columns:     print(col)     print(df[col].value_counts()) <pre>Time_step\nshape: (639_300, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Time_step           \u2506 count \u2502\n\u2502 ---                 \u2506 ---   \u2502\n\u2502 datetime[\u03bcs]        \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2030-03-12 15:14:50 \u2506 1     \u2502\n\u2502 2044-10-11 01:16:22 \u2506 2     \u2502\n\u2502 2027-11-11 10:14:35 \u2506 1     \u2502\n\u2502 2033-07-03 05:45:11 \u2506 2     \u2502\n\u2502 2047-01-18 20:56:36 \u2506 1     \u2502\n\u2502 \u2026                   \u2506 \u2026     \u2502\n\u2502 2031-10-21 22:05:00 \u2506 1     \u2502\n\u2502 2040-12-22 02:15:58 \u2506 3     \u2502\n\u2502 2053-12-29 12:37:20 \u2506 2     \u2502\n\u2502 2044-12-08 05:06:23 \u2506 1     \u2502\n\u2502 2026-04-25 20:24:25 \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTransaction_Id\nshape: (1_498_177, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Transaction_Id        \u2506 count \u2502\n\u2502 ---                   \u2506 ---   \u2502\n\u2502 str                   \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 DEPOSIT-CHECK-1098825 \u2506 1     \u2502\n\u2502 QUICK-PAYMENT-165216  \u2506 1     \u2502\n\u2502 PAYMENT-370145        \u2506 1     \u2502\n\u2502 MOVE-FUNDS-16226      \u2506 1     \u2502\n\u2502 PAYMENT-1761283       \u2506 1     \u2502\n\u2502 \u2026                     \u2506 \u2026     \u2502\n\u2502 MOVE-FUNDS-1246054    \u2506 1     \u2502\n\u2502 PAY-BILL-574600       \u2506 1     \u2502\n\u2502 PAYMENT-1079458       \u2506 1     \u2502\n\u2502 PAY-BILL-1445811      \u2506 1     \u2502\n\u2502 QUICK-PAYMENT-275784  \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nSender_Id\nshape: (59_072, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Id           \u2506 count \u2502\n\u2502 ---                 \u2506 ---   \u2502\n\u2502 str                 \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 BILL-COMPANY-57848  \u2506 1     \u2502\n\u2502 COMPANY-465936      \u2506 1     \u2502\n\u2502 COMPANY-339167      \u2506 9     \u2502\n\u2502 BILL-COMPANY-312323 \u2506 1     \u2502\n\u2502 CLIENT-916749       \u2506 16    \u2502\n\u2502 \u2026                   \u2506 \u2026     \u2502\n\u2502 BILL-COMPANY-135524 \u2506 1     \u2502\n\u2502 COMPANY-184350      \u2506 7     \u2502\n\u2502 CLIENT-850867       \u2506 7     \u2502\n\u2502 COMPANY-1922072     \u2506 1     \u2502\n\u2502 JPMC-CLIENT-228687  \u2506 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nSender_Account\nshape: (75_162, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Account  \u2506 count \u2502\n\u2502 ---             \u2506 ---   \u2502\n\u2502 str             \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ACCOUNT-1783292 \u2506 7     \u2502\n\u2502 ACCOUNT-1342736 \u2506 2     \u2502\n\u2502 ACCOUNT-1198294 \u2506 1     \u2502\n\u2502 ACCOUNT-1273712 \u2506 29    \u2502\n\u2502 ACCOUNT-162637  \u2506 44    \u2502\n\u2502 \u2026               \u2506 \u2026     \u2502\n\u2502 ACCOUNT-592880  \u2506 10    \u2502\n\u2502 ACCOUNT-49730   \u2506 52    \u2502\n\u2502 ACCOUNT-1318377 \u2506 56    \u2502\n\u2502 ACCOUNT-1202409 \u2506 1     \u2502\n\u2502 ACCOUNT-246019  \u2506 70    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nSender_Country\nshape: (253, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Country \u2506 count \u2502\n\u2502 ---            \u2506 ---   \u2502\n\u2502 str            \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 FRANCE         \u2506 892   \u2502\n\u2502 NORFOLK-ISLAND \u2506 818   \u2502\n\u2502 KYRGYZSTAN     \u2506 792   \u2502\n\u2502 NORTH-KOREA    \u2506 697   \u2502\n\u2502 GUERNSEY       \u2506 775   \u2502\n\u2502 \u2026              \u2506 \u2026     \u2502\n\u2502 TUVALU         \u2506 981   \u2502\n\u2502 CROATIA        \u2506 779   \u2502\n\u2502 VANUATU        \u2506 428   \u2502\n\u2502 MALI           \u2506 699   \u2502\n\u2502 SLOVAKIA       \u2506 646   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nSender_Sector\nshape: (50_001, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Sector \u2506 count \u2502\n\u2502 ---           \u2506 ---   \u2502\n\u2502 i64           \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 42463         \u2506 24    \u2502\n\u2502 657           \u2506 31    \u2502\n\u2502 16633         \u2506 22    \u2502\n\u2502 18778         \u2506 24    \u2502\n\u2502 47774         \u2506 21    \u2502\n\u2502 \u2026             \u2506 \u2026     \u2502\n\u2502 8236          \u2506 26    \u2502\n\u2502 336           \u2506 25    \u2502\n\u2502 14688         \u2506 27    \u2502\n\u2502 46685         \u2506 28    \u2502\n\u2502 27141         \u2506 24    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nSender_lob\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_lob \u2506 count   \u2502\n\u2502 ---        \u2506 ---     \u2502\n\u2502 str        \u2506 u32     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 CCB        \u2506 1279291 \u2502\n\u2502 null       \u2506 218886  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nBene_Id\nshape: (279_358, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Bene_Id              \u2506 count \u2502\n\u2502 ---                  \u2506 ---   \u2502\n\u2502 str                  \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 BILL-COMPANY-746297  \u2506 1     \u2502\n\u2502 BILL-COMPANY-1692823 \u2506 2     \u2502\n\u2502 BILL-COMPANY-199553  \u2506 1     \u2502\n\u2502 JPMC-COMPANY-2073091 \u2506 1     \u2502\n\u2502 COMPANY-878964       \u2506 2     \u2502\n\u2502 \u2026                    \u2506 \u2026     \u2502\n\u2502 BILL-COMPANY-1950813 \u2506 1     \u2502\n\u2502 BILL-COMPANY-1366095 \u2506 1     \u2502\n\u2502 BILL-COMPANY-1867198 \u2506 2     \u2502\n\u2502 BILL-COMPANY-2151199 \u2506 2     \u2502\n\u2502 COMPANY-1111851      \u2506 7     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nBene_Account\nshape: (295_032, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Bene_Account    \u2506 count \u2502\n\u2502 ---             \u2506 ---   \u2502\n\u2502 str             \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ACCOUNT-551117  \u2506 1     \u2502\n\u2502 ACCOUNT-981340  \u2506 3     \u2502\n\u2502 ACCOUNT-880415  \u2506 37    \u2502\n\u2502 ACCOUNT-1314604 \u2506 1     \u2502\n\u2502 ACCOUNT-2167713 \u2506 1     \u2502\n\u2502 \u2026               \u2506 \u2026     \u2502\n\u2502 ACCOUNT-538557  \u2506 3     \u2502\n\u2502 ACCOUNT-1614264 \u2506 1     \u2502\n\u2502 ACCOUNT-2036715 \u2506 3     \u2502\n\u2502 ACCOUNT-2175069 \u2506 1     \u2502\n\u2502 ACCOUNT-173079  \u2506 27    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nBene_Country\nshape: (253, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Bene_Country                    \u2506 count \u2502\n\u2502 ---                             \u2506 ---   \u2502\n\u2502 str                             \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ISRAEL                          \u2506 1617  \u2502\n\u2502 MEXICO                          \u2506 1681  \u2502\n\u2502 GREECE                          \u2506 1035  \u2502\n\u2502 ITALY                           \u2506 1664  \u2502\n\u2502 GREENLAND                       \u2506 1554  \u2502\n\u2502 \u2026                               \u2506 \u2026     \u2502\n\u2502 FEDERATION                      \u2506 1337  \u2502\n\u2502 SOUTH-AFRICA                    \u2506 1544  \u2502\n\u2502 SOUTH-GEORGIA-AND-THE-SOUTH-SA\u2026 \u2506 1543  \u2502\n\u2502 PAKISTAN                        \u2506 1362  \u2502\n\u2502 ALBANIA                         \u2506 1792  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nUSD_amount\nshape: (100_685, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 USD_amount \u2506 count \u2502\n\u2502 ---        \u2506 ---   \u2502\n\u2502 f64        \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 352.53     \u2506 19    \u2502\n\u2502 968.73     \u2506 15    \u2502\n\u2502 528.33     \u2506 16    \u2502\n\u2502 742.55     \u2506 16    \u2502\n\u2502 581.8      \u2506 12    \u2502\n\u2502 \u2026          \u2506 \u2026     \u2502\n\u2502 804.98     \u2506 13    \u2502\n\u2502 521.93     \u2506 14    \u2502\n\u2502 668.19     \u2506 8     \u2502\n\u2502 199.57     \u2506 8     \u2502\n\u2502 585.57     \u2506 10    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nLabel\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Label \u2506 count   \u2502\n\u2502 ---   \u2506 ---     \u2502\n\u2502 i64   \u2506 u32     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1     \u2506 30819   \u2502\n\u2502 0     \u2506 1467358 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTransaction_Type\nshape: (8, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Transaction_Type \u2506 count  \u2502\n\u2502 ---              \u2506 ---    \u2502\n\u2502 str              \u2506 u32    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 WITHDRAWAL       \u2506 107726 \u2502\n\u2502 PAY-CHECK        \u2506 107851 \u2502\n\u2502 EXCHANGE         \u2506 108167 \u2502\n\u2502 DEPOSIT-CHECK    \u2506 109477 \u2502\n\u2502 QUICK-PAYMENT    \u2506 217607 \u2502\n\u2502 MOVE-FUNDS       \u2506 180205 \u2502\n\u2502 DEPOSIT-CASH     \u2506 109409 \u2502\n\u2502 MAKE-PAYMENT     \u2506 557735 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <ul> <li>For the sake of training the model, I am taking label to be the 'target' column and the rest of the columns as features. I will be using the 'target' column to train the model and predict the values of the 'target' column for the test data.</li> </ul> In\u00a0[9]: Copied! <pre>df_fraudulent = df.filter(pl.col(\"Label\") == 1)\n</pre> df_fraudulent = df.filter(pl.col(\"Label\") == 1) In\u00a0[10]: Copied! <pre>df_fraudulent\n</pre> df_fraudulent Out[10]: shape: (30_819, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typedatetime[\u03bcs]strstrstrstri64strstrstrstrf64i64str2022-03-15 10:24:00\"QUICK-PAYMENT-8964\"\"JPMC-CLIENT-8947\"\"ACCOUNT-8957\"\"USA\"23505\"CCB\"\"CLIENT-8965\"\"ACCOUNT-8966\"\"BENIN\"857.131\"QUICK-PAYMENT\"2022-03-15 22:54:00\"DEPOSIT-CASH-2517\"nullnullnullnullnull\"JPMC-CLIENT-2492\"\"ACCOUNT-2502\"\"USA\"684.521\"DEPOSIT-CASH\"2022-03-15 23:04:00\"PAY-BILL-2521\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2503\"\"USA\"6909\"CCB\"\"JPMC-COMPANY-2495\"\"ACCOUNT-2501\"\"USA\"787.81\"MAKE-PAYMENT\"2022-03-15 23:14:00\"WITHDRAWAL-2519\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2502\"\"USA\"46666\"CCB\"nullnullnull194.671\"WITHDRAWAL\"2022-03-16 11:14:00\"MOVE-FUNDS-2522\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2503\"\"USA\"6337\"CCB\"\"JPMC-COMPANY-2494\"\"ACCOUNT-2500\"\"ALAND-ISLANDS\"812.271\"MOVE-FUNDS\"\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u20262054-09-03 15:57:24\"PAY-BILL-2176469\"\"JPMC-CLIENT-2176199\"\"ACCOUNT-2176209\"\"USA\"32806\"CCB\"\"BILL-COMPANY-2176271\"\"ACCOUNT-2176272\"\"USA\"551.121\"MAKE-PAYMENT\"2054-09-09 01:27:24\"QUICK-PAYMENT-2184316\"\"BILL-COMPANY-2184254\"\"ACCOUNT-2184255\"\"MALTA\"25754\"CCB\"\"JPMC-CLIENT-2184056\"\"ACCOUNT-2184137\"\"USA\"646.791\"QUICK-PAYMENT\"2054-09-09 14:07:24\"WITHDRAWAL-2184327\"\"JPMC-CLIENT-2184056\"\"ACCOUNT-2184137\"\"USA\"46304\"CCB\"nullnullnull800.691\"EXCHANGE\"2054-09-10 02:07:24\"QUICK-DEPOSIT-2184326\"nullnullnullnullnull\"JPMC-CLIENT-2184056\"\"ACCOUNT-2184067\"\"USA\"694.771\"DEPOSIT-CASH\"2054-09-10 02:17:24\"EXCHANGE-2184333\"\"JPMC-CLIENT-2184056\"\"ACCOUNT-2184066\"\"USA\"32926\"CCB\"nullnullnull811.061\"WITHDRAWAL\" In\u00a0[11]: Copied! <pre># EDA of fraudulent transactions\ndf_fraudulent[['USD_amount']].describe()\n</pre> # EDA of fraudulent transactions df_fraudulent[['USD_amount']].describe() Out[11]: shape: (9, 2)statisticUSD_amountstrf64\"count\"30819.0\"null_count\"0.0\"mean\"847.442043\"std\"2003.566402\"min\"100.0\"25%\"254.15\"50%\"512.23\"75%\"773.98\"max\"19998.94 In\u00a0[12]: Copied! <pre>df[['USD_amount']].describe()\n</pre> df[['USD_amount']].describe() Out[12]: shape: (9, 2)statisticUSD_amountstrf64\"count\"1.498177e6\"null_count\"0.0\"mean\"513.469777\"std\"539.808914\"min\"0.0\"25%\"138.69\"50%\"404.16\"75%\"734.07\"max\"19998.94 In\u00a0[13]: Copied! <pre># add histogram of fraudulent transactions\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.histplot(df_fraudulent['USD_amount'].to_numpy(), kde=True)\n</pre> # add histogram of fraudulent transactions import seaborn as sns import matplotlib.pyplot as plt  sns.histplot(df_fraudulent['USD_amount'].to_numpy(), kde=True) Out[13]: <pre>&lt;Axes: ylabel='Count'&gt;</pre> In\u00a0[14]: Copied! <pre># pie chart of fraudulent transactions to non-fraudulent transactions\nfraudulent_count = df_fraudulent.shape[0]\ntotal_count = df.shape[0]\nnon_fraudulent_count = total_count - fraudulent_count\n\nfig = go.Figure(data=[go.Pie(labels=['Fraudulent', 'Non-Fraudulent'], values=[fraudulent_count, non_fraudulent_count])])\nfig.show()\n</pre> # pie chart of fraudulent transactions to non-fraudulent transactions fraudulent_count = df_fraudulent.shape[0] total_count = df.shape[0] non_fraudulent_count = total_count - fraudulent_count  fig = go.Figure(data=[go.Pie(labels=['Fraudulent', 'Non-Fraudulent'], values=[fraudulent_count, non_fraudulent_count])]) fig.show() In\u00a0[15]: Copied! <pre>df.to_pandas()\n</pre> df.to_pandas() Out[15]: Time_step Transaction_Id Sender_Id Sender_Account Sender_Country Sender_Sector Sender_lob Bene_Id Bene_Account Bene_Country USD_amount Label Transaction_Type 0 2022-03-15 10:24:00 EXCHANGE-10115 JPMC-CLIENT-10098 ACCOUNT-10108 USA 35537.0 CCB None None None 558.43 0 WITHDRAWAL 1 2022-03-15 10:24:00 QUICK-PAYMENT-10116 JPMC-CLIENT-10098 ACCOUNT-10109 USA 15287.0 CCB CLIENT-10100 ACCOUNT-10106 CANADA 622.78 0 QUICK-PAYMENT 2 2022-03-15 10:24:00 DEPOSIT-CASH-9833 None None None NaN None JPMC-CLIENT-9812 ACCOUNT-9826 USA 802.54 0 DEPOSIT-CASH 3 2022-03-15 10:24:00 PAY-CHECK-9832 JPMC-CLIENT-9812 ACCOUNT-9825 USA 38145.0 CCB JPMC-CLIENT-9814 ACCOUNT-9824 USA 989.09 0 PAY-CHECK 4 2022-03-15 10:24:00 DEPOSIT-CHECK-9806 None None None NaN None JPMC-CLIENT-9789 ACCOUNT-9800 USA 786.78 0 DEPOSIT-CHECK ... ... ... ... ... ... ... ... ... ... ... ... ... ... 1498172 2054-09-14 13:17:24 PAY-BILL-2180018 JPMC-CLIENT-2179746 ACCOUNT-2179757 USA 24701.0 CCB BILL-COMPANY-2179895 ACCOUNT-2179896 USA 159.64 0 MAKE-PAYMENT 1498173 2054-09-15 00:57:24 QUICK-PAYMENT-2181421 JPMC-CLIENT-2181147 ACCOUNT-2181158 USA 4953.0 CCB CLIENT-2181279 ACCOUNT-2181280 USA 120.07 0 QUICK-PAYMENT 1498174 2054-09-15 01:17:24 PAYMENT-2180021 JPMC-CLIENT-2179746 ACCOUNT-2179757 USA 34784.0 CCB BILL-COMPANY-2180022 ACCOUNT-2180023 USA 25.32 0 MAKE-PAYMENT 1498175 2054-09-15 12:57:24 QUICK-PAYMENT-2181422 JPMC-CLIENT-2181147 ACCOUNT-2181158 USA 23822.0 CCB CLIENT-2181279 ACCOUNT-2181280 USA 610.91 0 QUICK-PAYMENT 1498176 2054-09-15 13:07:24 QUICK-PAYMENT-2181423 JPMC-CLIENT-2181147 ACCOUNT-2181158 USA 15499.0 CCB CLIENT-2181166 ACCOUNT-2181167 USA 688.51 0 QUICK-PAYMENT <p>1498177 rows \u00d7 13 columns</p> In\u00a0[22]: Copied! <pre># convert categorical columns to numerical values\nimport pandas as pd\ndfp = df.to_pandas()\n\ndfp['Transaction_Id'] = pd.factorize(dfp['Transaction_Id'])[0]\ndfp['Sender_Id'] = pd.factorize(dfp['Sender_Id'])[0]\ndfp['Sender_Account'] = pd.factorize(dfp['Sender_Account'])[0]\ndfp['Sender_Country'] = pd.factorize(dfp['Sender_Country'])[0]\ndfp['Sender_Sector'] = pd.factorize(dfp['Sender_Sector'])[0]\ndfp['Sender_lob'] = pd.factorize(dfp['Sender_lob'])[0]\ndfp['Bene_Id'] = pd.factorize(dfp['Bene_Id'])[0]\ndfp['Bene_Account'] = pd.factorize(dfp['Bene_Account'])[0]\ndfp['Bene_Country'] = pd.factorize(dfp['Bene_Country'])[0]\ndfp['Transaction_Type'] = pd.factorize(dfp['Transaction_Type'])[0]\n\n# calculate correlation matrix\ndfp.corr()\n</pre> # convert categorical columns to numerical values import pandas as pd dfp = df.to_pandas()  dfp['Transaction_Id'] = pd.factorize(dfp['Transaction_Id'])[0] dfp['Sender_Id'] = pd.factorize(dfp['Sender_Id'])[0] dfp['Sender_Account'] = pd.factorize(dfp['Sender_Account'])[0] dfp['Sender_Country'] = pd.factorize(dfp['Sender_Country'])[0] dfp['Sender_Sector'] = pd.factorize(dfp['Sender_Sector'])[0] dfp['Sender_lob'] = pd.factorize(dfp['Sender_lob'])[0] dfp['Bene_Id'] = pd.factorize(dfp['Bene_Id'])[0] dfp['Bene_Account'] = pd.factorize(dfp['Bene_Account'])[0] dfp['Bene_Country'] = pd.factorize(dfp['Bene_Country'])[0] dfp['Transaction_Type'] = pd.factorize(dfp['Transaction_Type'])[0]  # calculate correlation matrix dfp.corr() Out[22]: Time_step Transaction_Id Sender_Id Sender_Account Sender_Country Sender_Sector Sender_lob Bene_Id Bene_Account Bene_Country USD_amount Label Transaction_Type Time_step 1.000000 0.999989 0.771429 0.771080 0.005887 0.042890 -0.000823 0.773347 0.773253 0.003659 -0.000221 -0.002143 -0.000062 Transaction_Id 0.999989 1.000000 0.771435 0.771087 0.005964 0.043012 -0.000813 0.773359 0.773266 0.003686 -0.000232 -0.002140 -0.000041 Sender_Id 0.771429 0.771435 1.000000 0.999996 0.085291 0.340173 0.549939 0.528656 0.528385 0.063406 -0.006208 0.001349 0.097211 Sender_Account 0.771080 0.771087 0.999996 1.000000 0.086228 0.340479 0.550510 0.528276 0.528003 0.063566 -0.006434 0.001344 0.097331 Sender_Country 0.005887 0.005964 0.085291 0.086228 1.000000 0.082905 0.145205 0.012556 0.012583 -0.008155 -0.005085 0.008192 -0.006429 Sender_Sector 0.042890 0.043012 0.340173 0.340479 0.082905 1.000000 0.547302 -0.017607 -0.017810 0.061815 -0.005611 0.002992 0.096820 Sender_lob -0.000823 -0.000813 0.549939 0.550510 0.145205 0.547302 1.000000 -0.092986 -0.093349 0.111298 -0.012089 0.005082 0.176823 Bene_Id 0.773347 0.773359 0.528656 0.528276 0.012556 -0.017607 -0.092986 1.000000 0.999999 0.119291 -0.000188 -0.006394 0.042645 Bene_Account 0.773253 0.773266 0.528385 0.528003 0.012583 -0.017810 -0.093349 0.999999 1.000000 0.119389 -0.000001 -0.006395 0.042605 Bene_Country 0.003659 0.003686 0.063406 0.063566 -0.008155 0.061815 0.111298 0.119291 0.119389 1.000000 -0.089138 -0.000118 0.056952 USD_amount -0.000221 -0.000232 -0.006208 -0.006434 -0.005085 -0.005611 -0.012089 -0.000188 -0.000001 -0.089138 1.000000 0.089663 0.062357 Label -0.002143 -0.002140 0.001349 0.001344 0.008192 0.002992 0.005082 -0.006394 -0.006395 -0.000118 0.089663 1.000000 -0.041177 Transaction_Type -0.000062 -0.000041 0.097211 0.097331 -0.006429 0.096820 0.176823 0.042645 0.042605 0.056952 0.062357 -0.041177 1.000000 In\u00a0[26]: Copied! <pre># visualize correlation matrix with plotly\nfig = go.Figure(data=go.Heatmap(\n                     z=dfp.corr(),\n                     x=dfp.columns,\n                     y=dfp.columns))\nfig.show()\n</pre> # visualize correlation matrix with plotly fig = go.Figure(data=go.Heatmap(                      z=dfp.corr(),                      x=dfp.columns,                      y=dfp.columns)) fig.show() In\u00a0[28]: Copied! <pre># visualize correlation matrix for the label column with plotly\nlabel_column = 'Label'  # replace with the actual name of your label column\ncorrelations = dfp.corr()[label_column].sort_values(ascending=False)\n\nfig = go.Figure(data=go.Heatmap(\n                     z=[correlations.values],\n                     x=correlations.index,\n                     y=[label_column],\n                     colorscale='Viridis'))\nfig.update_layout(\n    title=f'Correlation of {label_column} with other features',\n    xaxis_title='Features',\n    yaxis_title=label_column\n)\nfig.show()\n</pre> # visualize correlation matrix for the label column with plotly label_column = 'Label'  # replace with the actual name of your label column correlations = dfp.corr()[label_column].sort_values(ascending=False)  fig = go.Figure(data=go.Heatmap(                      z=[correlations.values],                      x=correlations.index,                      y=[label_column],                      colorscale='Viridis')) fig.update_layout(     title=f'Correlation of {label_column} with other features',     xaxis_title='Features',     yaxis_title=label_column ) fig.show() In\u00a0[33]: Copied! <pre>from sklearn.model_selection import train_test_split\n\nX = dfp.drop(columns=['Label', 'Time_step'])\ny = dfp['Label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n</pre> from sklearn.model_selection import train_test_split  X = dfp.drop(columns=['Label', 'Time_step']) y = dfp['Label']  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) In\u00a0[35]: Copied! <pre># from sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Convert datetime column to numerical representation\n# le = LabelEncoder()\n# X_train['Time_step'] = le.fit_transform(X_train['Time_step'])\nX_train_scaled = StandardScaler().fit_transform(X_train)\n\n# Create and fit the logistic regression model\nmodel = LogisticRegression(max_iter=2000, C=0.1)\nmodel.fit(X_train_scaled, y_train)\n</pre> # from sklearn.preprocessing import LabelEncoder from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler  # Convert datetime column to numerical representation # le = LabelEncoder() # X_train['Time_step'] = le.fit_transform(X_train['Time_step']) X_train_scaled = StandardScaler().fit_transform(X_train)  # Create and fit the logistic regression model model = LogisticRegression(max_iter=2000, C=0.1) model.fit(X_train_scaled, y_train) Out[35]: <pre>LogisticRegression(C=0.1, max_iter=2000)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\u00a0\u00a0LogisticRegression?Documentation for LogisticRegressioniFitted<pre>LogisticRegression(C=0.1, max_iter=2000)</pre> In\u00a0[36]: Copied! <pre>X_train\n</pre> X_train Out[36]: Transaction_Id Sender_Id Sender_Account Sender_Country Sender_Sector Sender_lob Bene_Id Bene_Account Bene_Country USD_amount Transaction_Type 781636 781636 30568 39204 24 2354 0 145738 153943 1 73.82 5 598269 598269 -1 -1 -1 -1 -1 110518 116909 1 214.77 4 545830 545830 21330 27143 5 44034 0 101001 106908 1 209.92 1 358264 358264 -1 -1 -1 -1 -1 66168 70042 1 100.03 4 1323802 1323802 52067 66269 0 27487 0 246606 260478 153 372.72 6 ... ... ... ... ... ... ... ... ... ... ... ... 259178 259178 10074 12823 0 14988 0 -1 -1 -1 105.18 7 1414414 1414414 -1 -1 -1 -1 -1 263011 277768 1 104.39 2 131932 131932 4921 6537 0 25265 0 23325 24626 1 823.29 6 671155 671155 26336 33529 0 28318 0 124193 131358 1 427.54 1 121958 121958 4615 6020 250 43806 0 -1 -1 -1 197.36 0 <p>1198541 rows \u00d7 11 columns</p> In\u00a0[38]: Copied! <pre># evaluate the model\nfrom sklearn.metrics import classification_report\n\nX_test_scaled = StandardScaler().fit_transform(X_test)\ny_pred = model.predict(X_test_scaled)\n\nprint(classification_report(y_test, y_pred))\n</pre> # evaluate the model from sklearn.metrics import classification_report  X_test_scaled = StandardScaler().fit_transform(X_test) y_pred = model.predict(X_test_scaled)  print(classification_report(y_test, y_pred)) <pre>              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99    293559\n           1       0.91      0.02      0.04      6077\n\n    accuracy                           0.98    299636\n   macro avg       0.95      0.51      0.52    299636\nweighted avg       0.98      0.98      0.97    299636\n\n</pre> <p>The metrics indicate excellent performance on the majority class (non-fraudulent transactions) but very low recall and F1-score for the minority class (fraudulent transactions). This is a typical issue in highly imbalanced datasets, as the model primarily learns to classify the majority class correctly, neglecting the minority class.</p> In\u00a0[40]: Copied! <pre>model_class_weighted = LogisticRegression(max_iter=2000, C=0.1, class_weight='balanced')\nmodel_class_weighted.fit(X_train_scaled, y_train)\n</pre> model_class_weighted = LogisticRegression(max_iter=2000, C=0.1, class_weight='balanced') model_class_weighted.fit(X_train_scaled, y_train) Out[40]: <pre>LogisticRegression(C=0.1, class_weight='balanced', max_iter=2000)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\u00a0\u00a0LogisticRegression?Documentation for LogisticRegressioniFitted<pre>LogisticRegression(C=0.1, class_weight='balanced', max_iter=2000)</pre> In\u00a0[41]: Copied! <pre>y_pred_class_weighted = model_class_weighted.predict(X_test_scaled)\n\nprint(classification_report(y_test, y_pred_class_weighted))\n</pre> y_pred_class_weighted = model_class_weighted.predict(X_test_scaled)  print(classification_report(y_test, y_pred_class_weighted)) <pre>              precision    recall  f1-score   support\n\n           0       0.98      0.65      0.79    293559\n           1       0.03      0.47      0.05      6077\n\n    accuracy                           0.65    299636\n   macro avg       0.51      0.56      0.42    299636\nweighted avg       0.96      0.65      0.77    299636\n\n</pre> In\u00a0[44]: Copied! <pre># plot confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncm = confusion_matrix(y_test, y_pred_class_weighted)\nsns.heatmap(cm, annot=True)\n</pre> # plot confusion matrix from sklearn.metrics import confusion_matrix import seaborn as sns  cm = confusion_matrix(y_test, y_pred_class_weighted) sns.heatmap(cm, annot=True) Out[44]: <pre>&lt;Axes: &gt;</pre> In\u00a0[45]: Copied! <pre># plot ROC curve\nfrom sklearn.metrics import roc_curve, roc_auc_score\nimport matplotlib.pyplot as plt\n\ny_pred_proba = model_class_weighted.predict_proba(X_test_scaled)[:, 1]\nfpr, tpr, _ = roc_curve(y_test, y_pred_proba)\n\nplt.plot(fpr, tpr)\n</pre> # plot ROC curve from sklearn.metrics import roc_curve, roc_auc_score import matplotlib.pyplot as plt  y_pred_proba = model_class_weighted.predict_proba(X_test_scaled)[:, 1] fpr, tpr, _ = roc_curve(y_test, y_pred_proba)  plt.plot(fpr, tpr) Out[45]: <pre>[&lt;matplotlib.lines.Line2D at 0x30791c710&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/0.1.0-fraud-payment-eda/#data-loading-and-cleaning","title":"Data Loading and Cleaning\u00b6","text":""},{"location":"notebooks/0.1.0-fraud-payment-eda/#create-a-baseline-model","title":"Create a baseline model\u00b6","text":""},{"location":"notebooks/0.1.0-fraud-payment-eda/#adjusting-the-class-weights","title":"Adjusting the class weights\u00b6","text":"<p>Assigning a higher weight to the minority class can help the model pay more attention to it. This can be done by setting class_weight='balanced' in LogisticRegression, which automatically assigns weights inversely proportional to class frequencies.</p>"},{"location":"notebooks/0.1.1-fraud-payment-eda/","title":"0.1.1 fraud payment eda","text":"In\u00a0[127]: Copied! <pre>import pandas as pd\nimport polars as pl\nimport numpy as np\n\n# show all columns\npd.set_option('display.max_columns', None)\npl.Config(tbl_cols=-1)\n\ndf = pl.read_csv(\"../../data/Fraud_Payments/Data/fraud_payment_data/fraud_payment_data\")\n</pre> import pandas as pd import polars as pl import numpy as np  # show all columns pd.set_option('display.max_columns', None) pl.Config(tbl_cols=-1)  df = pl.read_csv(\"../../data/Fraud_Payments/Data/fraud_payment_data/fraud_payment_data\") In\u00a0[128]: Copied! <pre>df.head()\n</pre> df.head() Out[128]: shape: (5, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typestrstrstrstrstri64strstrstrstrf64i64str\"2022-03-15 10:24:00\"\"EXCHANGE-10115\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10108\"\"USA\"35537\"CCB\"nullnullnull558.430\"WITHDRAWAL\"\"2022-03-15 10:24:00\"\"QUICK-PAYMENT-10116\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10109\"\"USA\"15287\"CCB\"\"CLIENT-10100\"\"ACCOUNT-10106\"\"CANADA\"622.780\"QUICK-PAYMENT\"\"2022-03-15 10:24:00\"\"DEPOSIT-CASH-9833\"nullnullnullnullnull\"JPMC-CLIENT-9812\"\"ACCOUNT-9826\"\"USA\"802.540\"DEPOSIT-CASH\"\"2022-03-15 10:24:00\"\"PAY-CHECK-9832\"\"JPMC-CLIENT-9812\"\"ACCOUNT-9825\"\"USA\"38145\"CCB\"\"JPMC-CLIENT-9814\"\"ACCOUNT-9824\"\"USA\"989.090\"PAY-CHECK\"\"2022-03-15 10:24:00\"\"DEPOSIT-CHECK-9806\"nullnullnullnullnull\"JPMC-CLIENT-9789\"\"ACCOUNT-9800\"\"USA\"786.780\"DEPOSIT-CHECK\" In\u00a0[129]: Copied! <pre>df.null_count()\n</pre> df.null_count() Out[129]: shape: (1, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typeu32u32u32u32u32u32u32u32u32u32u32u32u3200218886218886218886218886218886215893215893215893000 In\u00a0[130]: Copied! <pre>df_fraud = df.filter(pl.col(\"Label\") == 1)\ndf_fraud.head()\n</pre> df_fraud = df.filter(pl.col(\"Label\") == 1) df_fraud.head() Out[130]: shape: (5, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typestrstrstrstrstri64strstrstrstrf64i64str\"2022-03-15 10:24:00\"\"QUICK-PAYMENT-8964\"\"JPMC-CLIENT-8947\"\"ACCOUNT-8957\"\"USA\"23505\"CCB\"\"CLIENT-8965\"\"ACCOUNT-8966\"\"BENIN\"857.131\"QUICK-PAYMENT\"\"2022-03-15 22:54:00\"\"DEPOSIT-CASH-2517\"nullnullnullnullnull\"JPMC-CLIENT-2492\"\"ACCOUNT-2502\"\"USA\"684.521\"DEPOSIT-CASH\"\"2022-03-15 23:04:00\"\"PAY-BILL-2521\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2503\"\"USA\"6909\"CCB\"\"JPMC-COMPANY-2495\"\"ACCOUNT-2501\"\"USA\"787.81\"MAKE-PAYMENT\"\"2022-03-15 23:14:00\"\"WITHDRAWAL-2519\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2502\"\"USA\"46666\"CCB\"nullnullnull194.671\"WITHDRAWAL\"\"2022-03-16 11:14:00\"\"MOVE-FUNDS-2522\"\"JPMC-CLIENT-2492\"\"ACCOUNT-2503\"\"USA\"6337\"CCB\"\"JPMC-COMPANY-2494\"\"ACCOUNT-2500\"\"ALAND-ISLANDS\"812.271\"MOVE-FUNDS\" In\u00a0[131]: Copied! <pre>df_fraud.null_count()\n</pre> df_fraud.null_count() Out[131]: shape: (1, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typeu32u32u32u32u32u32u32u32u32u32u32u32u320041214121412141214121513651365136000 In\u00a0[132]: Copied! <pre># compare the null count of the fraud dataframe and the original dataframe\nprint(\"Fraud dataframe null percentage: \", df_fraud.null_count() / df_fraud.shape[0])\nprint(\"Original dataframe null percentage: \", df.null_count() / df.shape[0])\n\n# show the difference in null percentage between the fraud dataframe and the original dataframe\nprint(\"Difference in null percentage: \", (df_fraud.null_count() / df_fraud.shape[0]) - (df.null_count() / df.shape[0]))\n</pre> # compare the null count of the fraud dataframe and the original dataframe print(\"Fraud dataframe null percentage: \", df_fraud.null_count() / df_fraud.shape[0]) print(\"Original dataframe null percentage: \", df.null_count() / df.shape[0])  # show the difference in null percentage between the fraud dataframe and the original dataframe print(\"Difference in null percentage: \", (df_fraud.null_count() / df_fraud.shape[0]) - (df.null_count() / df.shape[0])) <pre>Fraud dataframe null percentage:  shape: (1, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tim \u2506 Tra \u2506 Sen \u2506 Sender \u2506 Sende \u2506 Sende \u2506 Sende \u2506 Bene_ \u2506 Bene_ \u2506 Bene_ \u2506 USD_a \u2506 Label \u2506 Trans \u2502\n\u2502 e_s \u2506 nsa \u2506 der \u2506 _Accou \u2506 r_Cou \u2506 r_Sec \u2506 r_lob \u2506 Id    \u2506 Accou \u2506 Count \u2506 mount \u2506 ---   \u2506 actio \u2502\n\u2502 tep \u2506 cti \u2506 _Id \u2506 nt     \u2506 ntry  \u2506 tor   \u2506 ---   \u2506 ---   \u2506 nt    \u2506 ry    \u2506 ---   \u2506 f64   \u2506 n_Typ \u2502\n\u2502 --- \u2506 on_ \u2506 --- \u2506 ---    \u2506 ---   \u2506 ---   \u2506 f64   \u2506 f64   \u2506 ---   \u2506 ---   \u2506 f64   \u2506       \u2506 e     \u2502\n\u2502 f64 \u2506 Id  \u2506 f64 \u2506 f64    \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 ---   \u2502\n\u2502     \u2506 --- \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506 f64   \u2502\n\u2502     \u2506 f64 \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0.0 \u2506 0.0 \u2506 0.1 \u2506 0.1337 \u2506 0.133 \u2506 0.133 \u2506 0.133 \u2506 0.166 \u2506 0.166 \u2506 0.166 \u2506 0.0   \u2506 0.0   \u2506 0.0   \u2502\n\u2502     \u2506     \u2506 337 \u2506 16     \u2506 716   \u2506 716   \u2506 716   \u2506 65    \u2506 65    \u2506 65    \u2506       \u2506       \u2506       \u2502\n\u2502     \u2506     \u2506 16  \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nOriginal dataframe null percentage:  shape: (1, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tim \u2506 Tra \u2506 Sen \u2506 Sender \u2506 Sende \u2506 Sende \u2506 Sende \u2506 Bene_ \u2506 Bene_ \u2506 Bene_ \u2506 USD_a \u2506 Label \u2506 Trans \u2502\n\u2502 e_s \u2506 nsa \u2506 der \u2506 _Accou \u2506 r_Cou \u2506 r_Sec \u2506 r_lob \u2506 Id    \u2506 Accou \u2506 Count \u2506 mount \u2506 ---   \u2506 actio \u2502\n\u2502 tep \u2506 cti \u2506 _Id \u2506 nt     \u2506 ntry  \u2506 tor   \u2506 ---   \u2506 ---   \u2506 nt    \u2506 ry    \u2506 ---   \u2506 f64   \u2506 n_Typ \u2502\n\u2502 --- \u2506 on_ \u2506 --- \u2506 ---    \u2506 ---   \u2506 ---   \u2506 f64   \u2506 f64   \u2506 ---   \u2506 ---   \u2506 f64   \u2506       \u2506 e     \u2502\n\u2502 f64 \u2506 Id  \u2506 f64 \u2506 f64    \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 ---   \u2502\n\u2502     \u2506 --- \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506 f64   \u2502\n\u2502     \u2506 f64 \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0.0 \u2506 0.0 \u2506 0.1 \u2506 0.1461 \u2506 0.146 \u2506 0.146 \u2506 0.146 \u2506 0.144 \u2506 0.144 \u2506 0.144 \u2506 0.0   \u2506 0.0   \u2506 0.0   \u2502\n\u2502     \u2506     \u2506 461 \u2506 02     \u2506 102   \u2506 102   \u2506 102   \u2506 104   \u2506 104   \u2506 104   \u2506       \u2506       \u2506       \u2502\n\u2502     \u2506     \u2506 02  \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nDifference in null percentage:  shape: (1, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tim \u2506 Tra \u2506 Sen \u2506 Sender \u2506 Sende \u2506 Sende \u2506 Sende \u2506 Bene_ \u2506 Bene_ \u2506 Bene_ \u2506 USD_a \u2506 Label \u2506 Trans \u2502\n\u2502 e_s \u2506 nsa \u2506 der \u2506 _Accou \u2506 r_Cou \u2506 r_Sec \u2506 r_lob \u2506 Id    \u2506 Accou \u2506 Count \u2506 mount \u2506 ---   \u2506 actio \u2502\n\u2502 tep \u2506 cti \u2506 _Id \u2506 nt     \u2506 ntry  \u2506 tor   \u2506 ---   \u2506 ---   \u2506 nt    \u2506 ry    \u2506 ---   \u2506 f64   \u2506 n_Typ \u2502\n\u2502 --- \u2506 on_ \u2506 --- \u2506 ---    \u2506 ---   \u2506 ---   \u2506 f64   \u2506 f64   \u2506 ---   \u2506 ---   \u2506 f64   \u2506       \u2506 e     \u2502\n\u2502 f64 \u2506 Id  \u2506 f64 \u2506 f64    \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 f64   \u2506 f64   \u2506       \u2506       \u2506 ---   \u2502\n\u2502     \u2506 --- \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506 f64   \u2502\n\u2502     \u2506 f64 \u2506     \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0.0 \u2506 0.0 \u2506 -0. \u2506 -0.012 \u2506 -0.01 \u2506 -0.01 \u2506 -0.01 \u2506 0.022 \u2506 0.022 \u2506 0.022 \u2506 0.0   \u2506 0.0   \u2506 0.0   \u2502\n\u2502     \u2506     \u2506 012 \u2506 385    \u2506 2385  \u2506 2385  \u2506 2385  \u2506 547   \u2506 547   \u2506 547   \u2506       \u2506       \u2506       \u2502\n\u2502     \u2506     \u2506 385 \u2506        \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2506       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Interestingly enough there is not a significant difference in the number of missing values between fraudulent transactions compared to the entire dataset. This is not a strong indicator of fraud, but it may be used as a feature to improve the model.</p> <p>As to not loose information, we will fill the missing values with a new category called <code>Unknown</code>.</p> In\u00a0[133]: Copied! <pre>df = df.with_columns([\n    pl.col(\"Sender_Id\").fill_null(\"unknown_sender\").alias(\"Sender_Id\"),\n    pl.col(\"Sender_Account\").fill_null(\"unknown_sender_account\").alias(\"Sender_Account\"),\n    pl.col(\"Sender_Country\").fill_null(\"unknown_sender_country\").alias(\"Sender_Country\"),\n    pl.col(\"Sender_Sector\").fill_null(\"unknown_sender_sector\").alias(\"Sender_Sector\"),\n    pl.col(\"Sender_lob\").fill_null(\"unknown_sender_lob\").alias(\"Sender_lob\"),\n    pl.col(\"Bene_Id\").fill_null(\"unknown_receiver\").alias(\"Bene_Id\"),\n    pl.col(\"Bene_Account\").fill_null(\"unknown_receiver_account\").alias(\"Bene_Account\"),\n    pl.col(\"Bene_Country\").fill_null(\"unknown_receiver_country\").alias(\"Bene_Country\")\n])\n\n# Display the updated DataFrame\ndf.head()\n</pre> df = df.with_columns([     pl.col(\"Sender_Id\").fill_null(\"unknown_sender\").alias(\"Sender_Id\"),     pl.col(\"Sender_Account\").fill_null(\"unknown_sender_account\").alias(\"Sender_Account\"),     pl.col(\"Sender_Country\").fill_null(\"unknown_sender_country\").alias(\"Sender_Country\"),     pl.col(\"Sender_Sector\").fill_null(\"unknown_sender_sector\").alias(\"Sender_Sector\"),     pl.col(\"Sender_lob\").fill_null(\"unknown_sender_lob\").alias(\"Sender_lob\"),     pl.col(\"Bene_Id\").fill_null(\"unknown_receiver\").alias(\"Bene_Id\"),     pl.col(\"Bene_Account\").fill_null(\"unknown_receiver_account\").alias(\"Bene_Account\"),     pl.col(\"Bene_Country\").fill_null(\"unknown_receiver_country\").alias(\"Bene_Country\") ])  # Display the updated DataFrame df.head()  Out[133]: shape: (5, 13)Time_stepTransaction_IdSender_IdSender_AccountSender_CountrySender_SectorSender_lobBene_IdBene_AccountBene_CountryUSD_amountLabelTransaction_Typestrstrstrstrstrstrstrstrstrstrf64i64str\"2022-03-15 10:24:00\"\"EXCHANGE-10115\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10108\"\"USA\"\"35537\"\"CCB\"\"unknown_receiver\"\"unknown_receiver_account\"\"unknown_receiver_country\"558.430\"WITHDRAWAL\"\"2022-03-15 10:24:00\"\"QUICK-PAYMENT-10116\"\"JPMC-CLIENT-10098\"\"ACCOUNT-10109\"\"USA\"\"15287\"\"CCB\"\"CLIENT-10100\"\"ACCOUNT-10106\"\"CANADA\"622.780\"QUICK-PAYMENT\"\"2022-03-15 10:24:00\"\"DEPOSIT-CASH-9833\"\"unknown_sender\"\"unknown_sender_account\"\"unknown_sender_country\"\"unknown_sender_sector\"\"unknown_sender_lob\"\"JPMC-CLIENT-9812\"\"ACCOUNT-9826\"\"USA\"802.540\"DEPOSIT-CASH\"\"2022-03-15 10:24:00\"\"PAY-CHECK-9832\"\"JPMC-CLIENT-9812\"\"ACCOUNT-9825\"\"USA\"\"38145\"\"CCB\"\"JPMC-CLIENT-9814\"\"ACCOUNT-9824\"\"USA\"989.090\"PAY-CHECK\"\"2022-03-15 10:24:00\"\"DEPOSIT-CHECK-9806\"\"unknown_sender\"\"unknown_sender_account\"\"unknown_sender_country\"\"unknown_sender_sector\"\"unknown_sender_lob\"\"JPMC-CLIENT-9789\"\"ACCOUNT-9800\"\"USA\"786.780\"DEPOSIT-CHECK\" In\u00a0[134]: Copied! <pre># Count of each class (fraudulent and non-fraudulent transactions)\nclass_counts = df[\"Label\"].value_counts()\nprint(\"Class Counts:\\n\", class_counts)\n\n# Proportion of each class\nclass_proportion = df[\"Label\"].value_counts(normalize=True)\nprint(\"\\nClass Proportion:\\n\", class_proportion)\n</pre> # Count of each class (fraudulent and non-fraudulent transactions) class_counts = df[\"Label\"].value_counts() print(\"Class Counts:\\n\", class_counts)  # Proportion of each class class_proportion = df[\"Label\"].value_counts(normalize=True) print(\"\\nClass Proportion:\\n\", class_proportion)  <pre>Class Counts:\n shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Label \u2506 count   \u2502\n\u2502 ---   \u2506 ---     \u2502\n\u2502 i64   \u2506 u32     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 1467358 \u2502\n\u2502 1     \u2506 30819   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nClass Proportion:\n shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Label \u2506 proportion \u2502\n\u2502 ---   \u2506 ---        \u2502\n\u2502 i64   \u2506 f64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 0.979429   \u2502\n\u2502 1     \u2506 0.020571   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <ul> <li>From the information supplied, we can see that the dataset is highly imbalanced, with only 2.06% of the transactions being fraudulent. This is a common issue in fraud detection problems, and it can be addressed by using techniques like oversampling or undersampling.</li> </ul> In\u00a0[137]: Copied! <pre>import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nsns.countplot(data=df, x=\"Transaction_Type\", hue=\"Label\")\nplt.title(\"Fraud Distribution by Transaction Type\")\nplt.xticks(rotation=45)\nplt.show()\n</pre> import seaborn as sns import matplotlib.pyplot as plt  plt.figure(figsize=(10, 6)) sns.countplot(data=df, x=\"Transaction_Type\", hue=\"Label\") plt.title(\"Fraud Distribution by Transaction Type\") plt.xticks(rotation=45) plt.show() In\u00a0[166]: Copied! <pre># compare the payment types by the proportion of fraudulent transactions in each type\npayment_type_proportion = df.group_by(\"Transaction_Type\").agg([\n    (pl.col(\"Label\").mean()).alias(\"fraud_proportion\")\n])\n\nprint(\"Proportion of Fraudulent Transactions by Payment Type:\\n\", payment_type_proportion)\n</pre> # compare the payment types by the proportion of fraudulent transactions in each type payment_type_proportion = df.group_by(\"Transaction_Type\").agg([     (pl.col(\"Label\").mean()).alias(\"fraud_proportion\") ])  print(\"Proportion of Fraudulent Transactions by Payment Type:\\n\", payment_type_proportion) <pre>Proportion of Fraudulent Transactions by Payment Type:\n shape: (8, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Transaction_Type \u2506 fraud_proportion \u2502\n\u2502 ---              \u2506 ---              \u2502\n\u2502 str              \u2506 f64              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 EXCHANGE         \u2506 0.023353         \u2502\n\u2502 DEPOSIT-CASH     \u2506 0.025336         \u2502\n\u2502 MOVE-FUNDS       \u2506 0.016864         \u2502\n\u2502 QUICK-PAYMENT    \u2506 0.036465         \u2502\n\u2502 PAY-CHECK        \u2506 0.028233         \u2502\n\u2502 MAKE-PAYMENT     \u2506 0.013524         \u2502\n\u2502 WITHDRAWAL       \u2506 0.024228         \u2502\n\u2502 DEPOSIT-CHECK    \u2506 0.012322         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[152]: Copied! <pre># count the contries with the highest number of fraudulent transactions\nfraud_country_counts = df.filter(pl.col(\"Label\") == 1)[\"Sender_Country\"].value_counts()\nprint(\"Fraud Country Counts:\\n\", fraud_country_counts)\nprint(\"Top 5 Fraud Countries:\\n\", fraud_country_counts.head(5))\n</pre> # count the contries with the highest number of fraudulent transactions fraud_country_counts = df.filter(pl.col(\"Label\") == 1)[\"Sender_Country\"].value_counts() print(\"Fraud Country Counts:\\n\", fraud_country_counts) print(\"Top 5 Fraud Countries:\\n\", fraud_country_counts.head(5)) <pre>Fraud Country Counts:\n shape: (253, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Country                 \u2506 count \u2502\n\u2502 ---                            \u2506 ---   \u2502\n\u2502 str                            \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 JAMAICA                        \u2506 23    \u2502\n\u2502 ROMANIA                        \u2506 9     \u2502\n\u2502 SUDAN                          \u2506 16    \u2502\n\u2502 OMAN                           \u2506 14    \u2502\n\u2502 BULGARIA                       \u2506 23    \u2502\n\u2502 \u2026                              \u2506 \u2026     \u2502\n\u2502 SAINT-KITTS-NEVIS              \u2506 33    \u2502\n\u2502 SAMOA                          \u2506 21    \u2502\n\u2502 BRITISH-INDIAN-OCEAN-TERRITORY \u2506 11    \u2502\n\u2502 SOUTH-AFRICA                   \u2506 26    \u2502\n\u2502 CHILE                          \u2506 15    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTop 5 Fraud Countries:\n shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Country \u2506 count \u2502\n\u2502 ---            \u2506 ---   \u2502\n\u2502 str            \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 JAMAICA        \u2506 23    \u2502\n\u2502 ROMANIA        \u2506 9     \u2502\n\u2502 SUDAN          \u2506 16    \u2502\n\u2502 OMAN           \u2506 14    \u2502\n\u2502 BULGARIA       \u2506 23    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[153]: Copied! <pre># countries with the highest proportion of fraudulent transactions\nfraud_country_proportion = df.filter(pl.col(\"Label\") == 1)[\"Sender_Country\"].value_counts(normalize=True)\nprint(\"\\nFraud Country Proportion:\\n\", fraud_country_proportion)\nprint(\"Top 5 Fraud Countries Proportion:\\n\", fraud_country_proportion.head(5))\n</pre> # countries with the highest proportion of fraudulent transactions fraud_country_proportion = df.filter(pl.col(\"Label\") == 1)[\"Sender_Country\"].value_counts(normalize=True) print(\"\\nFraud Country Proportion:\\n\", fraud_country_proportion) print(\"Top 5 Fraud Countries Proportion:\\n\", fraud_country_proportion.head(5)) <pre>\nFraud Country Proportion:\n shape: (253, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Country   \u2506 proportion \u2502\n\u2502 ---              \u2506 ---        \u2502\n\u2502 str              \u2506 f64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 INDONESIA        \u2506 0.000811   \u2502\n\u2502 BELARUS          \u2506 0.000389   \u2502\n\u2502 ANGOLA           \u2506 0.000844   \u2502\n\u2502 MAYOTTE          \u2506 0.001006   \u2502\n\u2502 CUBA             \u2506 0.00026    \u2502\n\u2502 \u2026                \u2506 \u2026          \u2502\n\u2502 GIBRALTAR        \u2506 0.000649   \u2502\n\u2502 PAPUA-NEW-GUINEA \u2506 0.000422   \u2502\n\u2502 PERU             \u2506 0.000649   \u2502\n\u2502 NORFOLK-ISLAND   \u2506 0.000422   \u2502\n\u2502 BOTSWANA         \u2506 0.000357   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTop 5 Fraud Countries Proportion:\n shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sender_Country \u2506 proportion \u2502\n\u2502 ---            \u2506 ---        \u2502\n\u2502 str            \u2506 f64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 INDONESIA      \u2506 0.000811   \u2502\n\u2502 BELARUS        \u2506 0.000389   \u2502\n\u2502 ANGOLA         \u2506 0.000844   \u2502\n\u2502 MAYOTTE        \u2506 0.001006   \u2502\n\u2502 CUBA           \u2506 0.00026    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[\u00a0]: Copied! <pre>#\n</pre> # In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[143]: Copied! <pre>df = df.with_columns(\n    pl.col(\"Time_step\").str.to_datetime(format=\"%Y-%m-%d %H:%M:%S\")\n)\n</pre> df = df.with_columns(     pl.col(\"Time_step\").str.to_datetime(format=\"%Y-%m-%d %H:%M:%S\") ) In\u00a0[157]: Copied! <pre># visualize the distribution of fraudulent transactions over time\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\ndf_fraud = df.filter(pl.col(\"Label\") == 1)\nfig.add_trace(go.Scatter(x=df_fraud[\"Time_step\"], y=df_fraud[\"USD_amount\"], mode='markers', name='Fraudulent Transactions'))\n\nfig.update_layout(title='Fraudulent Transactions Over Time',\n                    xaxis_title='Time',\n                    yaxis_title='Amount')\nfig.show()\n</pre> # visualize the distribution of fraudulent transactions over time import plotly.graph_objects as go  fig = go.Figure()  df_fraud = df.filter(pl.col(\"Label\") == 1) fig.add_trace(go.Scatter(x=df_fraud[\"Time_step\"], y=df_fraud[\"USD_amount\"], mode='markers', name='Fraudulent Transactions'))  fig.update_layout(title='Fraudulent Transactions Over Time',                     xaxis_title='Time',                     yaxis_title='Amount') fig.show() In\u00a0[161]: Copied! <pre># calculate the month of fraudulent transactions\ndf_fraud = df.filter(pl.col(\"Label\") == 1)\ndf_fraud = df_fraud.with_columns([\n    pl.col(\"Time_step\").dt.month().alias(\"Month\")\n])\n\n# count the number of fraudulent transactions per month\nfraud_month_counts = df_fraud[\"Month\"].value_counts()\nprint(\"Fraud Month Counts:\\n\", fraud_month_counts)\n\n# visualize the distribution of fraudulent transactions over months\nplt.figure(figsize=(10, 6))\nsns.countplot(data=df_fraud, x=\"Month\")\nplt.title(\"Fraud Distribution by Month\")\nplt.xticks(rotation=45)\nplt.show()\n</pre> # calculate the month of fraudulent transactions df_fraud = df.filter(pl.col(\"Label\") == 1) df_fraud = df_fraud.with_columns([     pl.col(\"Time_step\").dt.month().alias(\"Month\") ])  # count the number of fraudulent transactions per month fraud_month_counts = df_fraud[\"Month\"].value_counts() print(\"Fraud Month Counts:\\n\", fraud_month_counts)  # visualize the distribution of fraudulent transactions over months plt.figure(figsize=(10, 6)) sns.countplot(data=df_fraud, x=\"Month\") plt.title(\"Fraud Distribution by Month\") plt.xticks(rotation=45) plt.show() <pre>Fraud Month Counts:\n shape: (12, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Month \u2506 count \u2502\n\u2502 ---   \u2506 ---   \u2502\n\u2502 i8    \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 7     \u2506 2724  \u2502\n\u2502 9     \u2506 2291  \u2502\n\u2502 5     \u2506 2651  \u2502\n\u2502 10    \u2506 2424  \u2502\n\u2502 4     \u2506 2784  \u2502\n\u2502 \u2026     \u2506 \u2026     \u2502\n\u2502 11    \u2506 2496  \u2502\n\u2502 8     \u2506 2650  \u2502\n\u2502 12    \u2506 2713  \u2502\n\u2502 3     \u2506 2521  \u2502\n\u2502 2     \u2506 2308  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[144]: Copied! <pre>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create the scatter plot\nplt.figure(figsize=(14, 6))\nsns.scatterplot(data=df, x=\"Time_step\", y=\"USD_amount\", hue=\"Label\", palette={0: 'blue', 1: 'red'}, alpha=0.5)\n\n# Customize the plot\nplt.title(\"Transaction Amounts Over Time by Fraud Label\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"USD Amount\")\nplt.legend(title=\"Label\", labels=[\"Non-Fraud\", \"Fraud\"])\nplt.show()\n</pre> import matplotlib.pyplot as plt import seaborn as sns  # Create the scatter plot plt.figure(figsize=(14, 6)) sns.scatterplot(data=df, x=\"Time_step\", y=\"USD_amount\", hue=\"Label\", palette={0: 'blue', 1: 'red'}, alpha=0.5)  # Customize the plot plt.title(\"Transaction Amounts Over Time by Fraud Label\") plt.xlabel(\"Time\") plt.ylabel(\"USD Amount\") plt.legend(title=\"Label\", labels=[\"Non-Fraud\", \"Fraud\"]) plt.show()  <pre>/Users/christianl/repos/research/.venv/lib/python3.12/site-packages/IPython/core/pylabtools.py:170: UserWarning:\n\nCreating legend with loc=\"best\" can be slow with large amounts of data.\n\n</pre> In\u00a0[136]: Copied! <pre>df['USD_amount'].describe()\n</pre> df['USD_amount'].describe() Out[136]: shape: (9, 2)statisticvaluestrf64\"count\"1.498177e6\"null_count\"0.0\"mean\"513.469777\"std\"539.808914\"min\"0.0\"25%\"138.69\"50%\"404.16\"75%\"734.07\"max\"19998.94 In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/0.1.1-fraud-payment-eda/#data-cleaning-and-handling-missing-values","title":"Data Cleaning and Handling Missing Values\u00b6","text":"<p>In this context the null values in essential columns like <code>Sender_Id</code> can be a strong indicator of a fraudulent transaction. We can use this information to create a new feature that indicates whether the transaction is fraudulent or not.</p>"},{"location":"notebooks/0.1.1-fraud-payment-eda/#class-balance-analysis","title":"Class Balance Analysis\u00b6","text":""},{"location":"notebooks/0.1.1-fraud-payment-eda/#descriptive-statistics-us-dollar-amounts","title":"Descriptive Statistics (US Dollar Amounts)\u00b6","text":""},{"location":"notebooks/0.1.1-fraud-payment-eda/#outliers-detection-and-analysis","title":"Outliers Detection and Analysis\u00b6","text":""},{"location":"notebooks/0.1.1-fraud-payment-eda/#correlation-analysis","title":"Correlation Analysis\u00b6","text":""},{"location":"research/abstract/","title":"Abstract","text":"<p>This roadmap outlines a project-based approach to mastering quantitative finance models and data science techniques, with a focus on applying advanced methods for investment, risk assessment, and financial modeling. The objective is to develop expertise across key areas of quantitative analysis:</p>"},{"location":"research/abstract/#options-pricing-and-interest-rate-modeling","title":"Options Pricing and Interest Rate Modeling:","text":"<p>This section focuses on foundational models to assess market dynamics and valuate complex financial contracts.</p> <ul> <li> <p>Black-Scholes Model: Master this model for European options pricing, covering aspects like volatility modeling, option Greeks, and risk-neutral valuation, which are essential for understanding pricing and hedging strategies.</p> </li> <li> <p>Interest Rate Modeling: Develop skills in interest rate models like the Vasicek and Cox-Ingersoll-Ross (CIR) models, focusing on yield curve simulation and understanding how interest rate fluctuations impact bond prices and derivatives.</p> </li> <li> <p>Stochastic Calculus Applications: Learn to apply stochastic differential equations (SDEs) and It\u00f4 calculus to financial models, establishing a foundation for advanced pricing strategies.</p> </li> <li> <p>Sensitivity Analysis with Greeks: Dive into options sensitivity measures (Delta, Gamma, Vega, Theta, Rho) to understand how options react to market changes, helping inform risk management and optimization.</p> </li> </ul>"},{"location":"research/abstract/#algorithmic-trading-and-sentiment-analysis","title":"Algorithmic Trading and Sentiment Analysis:","text":"<p>Focus on building automated systems that leverage data and sentiment to execute trades.</p> <ul> <li> <p>High-Frequency Trading (HFT): Understand the mechanics and infrastructure behind HFT, where milliseconds matter. This includes latency optimization, order flow, and co-location strategies.</p> </li> <li> <p>Sentiment Analysis for Financial Data: Learn to apply NLP techniques, such as sentiment scoring, named entity recognition (NER), and transformer models (e.g., BERT, FinBERT) to interpret news and social media signals that inform trading decisions.</p> </li> <li> <p>Backtesting and Strategy Evaluation: Build frameworks to backtest algorithms on historical data, optimizing and validating models to ensure robustness in various market conditions.</p> </li> <li> <p>Risk Management in Algorithmic Trading: Develop methods to monitor and limit risk in real-time, including position sizing, stop-loss techniques, and dynamic risk adjustments based on volatility.</p> </li> </ul>"},{"location":"research/abstract/#monte-carlo-simulations-for-risk-assessment","title":"Monte Carlo Simulations for Risk Assessment:","text":"<p>Use Monte Carlo techniques to create robust risk assessment models and simulate diverse market conditions.</p> <ul> <li> <p>Value-at-Risk (VaR) Calculation: Learn how to calculate VaR to estimate the potential loss of a portfolio over a specified time frame, incorporating historical and simulated data.</p> </li> <li> <p>Stress Testing Scenarios: Build and test hypothetical market scenarios (e.g., financial crises, interest rate shocks) to assess portfolio resilience and prepare for extreme events.</p> </li> <li> <p>Path-Dependent Options and Exotic Derivatives: Explore Monte Carlo\u2019s applications for pricing complex derivatives like Asian options and lookbacks, where future payoffs depend on the asset's price path.</p> </li> <li> <p>Model Convergence and Optimization: Optimize simulations to improve accuracy and computational efficiency, ensuring convergence for reliable results in high-stakes scenarios.</p> </li> </ul>"},{"location":"research/abstract/#predictive-modeling-and-statistical-forecasting","title":"Predictive Modeling and Statistical Forecasting:","text":"<p>Focus on building and fine-tuning models to anticipate financial trends and price movements.</p> <ul> <li> <p>Time-Series Models: Gain expertise in ARIMA, GARCH, and LSTM neural networks for forecasting price trends and volatility patterns within asset classes.</p> </li> <li> <p>Machine Learning for Market Prediction: Use regression, random forests, and ensemble methods to predict asset prices or classify market conditions, adapting models to dynamic market environments.</p> </li> <li> <p>Bayesian Inference: Apply Bayesian methods for model uncertainty and parameter estimation, adding adaptability to predictive models under varying conditions.</p> </li> <li> <p>Feature Engineering for Financial Data: Create robust features using rolling averages, volatility indicators, and sentiment scores, enhancing predictive power for more accurate trading signals.</p> </li> </ul>"},{"location":"research/abstract/#comprehensive-risk-modeling","title":"Comprehensive Risk Modeling:","text":"<p>Develop skills to model different types of risk across credit, market, and operational domains.</p> <ul> <li> <p>Credit Risk Models: Use probability of default (PD) and loss given default (LGD) models to evaluate creditworthiness, using data-driven approaches for corporate and individual assessments.</p> </li> <li> <p>Market Risk Management: Apply VaR, conditional VaR, and sensitivity analysis to manage exposure to asset price fluctuations, understanding both direct and indirect risk impacts.</p> </li> <li> <p>Operational Risk Assessment: Model operational risk scenarios, including business disruptions, fraud, and cybersecurity threats, and quantify their impact on financial stability.</p> </li> <li> <p>Scenario and Sensitivity Analysis: Conduct \u201cwhat-if\u201d analyses to identify risk exposure changes under varying assumptions, helping prepare for and mitigate potential losses.</p> </li> </ul>"}]}